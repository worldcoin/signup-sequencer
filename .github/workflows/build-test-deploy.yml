name: Build, Test & Deploy

on:
  push

env:
  RUST_VERSION: "1.60"
  NIGHTLY_VERSION: nightly-2022-04-18
  CARGO_TERM_COLOR: always
  # Skip incremental build and debug info generation in CI
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  IMAGE_ID: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  accept:
    name: Accept
    runs-on: ubuntu-latest
    needs: [lint, test, build_and_push, image_manifest, snyk_scan_container, helm_lint]
    steps:
      - name: Accept
        run: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.NIGHTLY_VERSION }}
          override: true
          components: rustfmt, clippy
      - name: Cache build
        uses: Swatinem/rust-cache@v1
        with:
          key: cache-v1
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --locked --all-features --all-targets
      - name: Check docs
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --locked --all-features --no-deps --document-private-items

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.NIGHTLY_VERSION }}
          override: true
      - name: Cache build
        uses: Swatinem/rust-cache@v1
        with:
          key: cache-v1
      - run:  npm install ganache-cli@latest --global
      # Cargo doc test is not included in `--all-targets`
      # See <https://github.com/rust-lang/cargo/issues/6669>
      # Cargo doc test also doesn't support `--no-run`, so we run it but
      # have it just print `--help`.
      - name: Build tests
        run: |
          cargo test --locked --all-features --all-targets --no-run
          cargo test --locked --all-features --doc -- --help
      - name: Run tests
        run: |
          cargo test --locked --all-features --all-targets -- --nocapture
          cargo test --locked --all-features --doc -- --nocapture

  codecov:
    # See <https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/source-based-code-coverage.html>
    name: Coverage
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -Cinstrument-coverage
      RUSTDOCFLAGS: -C instrument-coverage -Z unstable-options --persist-doctests target/debug/doctestbins
      LLVM_PROFILE_FILE: profile-%m.profraw
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.NIGHTLY_VERSION }}
          override: true
          components: llvm-tools-preview
      - name: Cache build
        uses: Swatinem/rust-cache@v1
        with:
          key: cache-v1
      - name: Install cargo-binutils
        run: cargo install cargo-binutils
      - run:  npm install ganache-cli@latest --global
      - name: Build tests with coverage
        run: |
          cargo test --locked --all-features --all-targets --no-fail-fast --no-run
          cargo test --locked --all-features --doc --no-fail-fast -- --help
      - name: Run tests with coverage
        run: |
          cargo test --locked --all-features --all-targets --no-fail-fast -- --nocapture
          cargo test --locked --all-features --doc --no-fail-fast
      - name: Merge execution traces
        run: cargo profdata -- merge -sparse $(find . -iname "profile-*.profraw") -o profile.profdata
      - name: Export to lcov format for codecov
        # See <https://doc.rust-lang.org/nightly/unstable-book/compiler-flags/instrument-coverage.html#including-doc-tests>
        run:
          cargo cov -- export
            --format=lcov > profile.lcov
            --instr-profile=profile.profdata
            $(
              for file in
                $(
                  cargo test --locked --all-features --all-targets
                    --no-fail-fast --no-run --message-format=json
                    | jq -r "select(.profile.test == true) | .filenames[]"
                    | grep -v dSYM -
                )
                target/debug/doctestbins/*/rust_out;
              do
                [[ -x $file ]] && printf "%s %s " -object $file ;
              done
            )
      - name: Submit to codecov.io
        uses: codecov/codecov-action@v3.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional for public repos
          flags: test
          fail_ci_if_error: true
          verbose: true

  security_audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          default: true
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build_and_push:
    name: Build image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64]
    env:
      FEATURES: mimalloc
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          default: true
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          # Bump buildkit version because we need PR 2433 to fix a bug
          # in Github Actions Cache support.
          # See <https://github.com/moby/buildkit/pull/2433>
          driver-opts: image=moby/buildkit:v0.9.3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache build
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform }}-cache-v1
      - name: Build executable
        run: |
          case ${{ matrix.platform }} in
            amd64) ARCH=x86_64 ;;
            arm64) ARCH=aarch64 ;;
            *) false
          esac
          docker run --rm \
            -u $UID:$GID \
            -v "$(pwd)":/src \
            -v $HOME/.cargo:/usr/local/cargo \
            -v /usr/local/cargo/bin \
            ghcr.io/recmo/rust-static-build:$RUST_VERSION-$ARCH \
            cargo build --locked --release --features "$FEATURES"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/${{ matrix.platform }}
          tags: ${{ env.IMAGE_ID }}-${{ matrix.platform }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test image
        run:
          docker run --pull always --platform linux/${{ matrix.platform }} --rm $IMAGE_ID-${{ matrix.platform }} --version

  image_manifest:
    name: Image manifest
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest
        run: docker manifest create $IMAGE_ID{,-amd64,-arm64}
      - name: Inspect manifest
        run: docker manifest inspect $IMAGE_ID
      - name: Push manifest
        run: docker manifest push $IMAGE_ID

  snyk_scan_container:
    name: Snyk container scan
    runs-on: ubuntu-latest
    needs: [ image_manifest ]
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    steps:
      - name: Set up Snyk
        uses: snyk/actions/setup@master
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: docker pull $IMAGE_ID
      - name: Snyk Scan
        # TODO: $IMAGE_ID is a multi-platform manifest, does it scan all?
        run: snyk container test $IMAGE_ID

  helm_lint:
    name: Lint helm chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup kube-score
        uses: tobbbles/setup-kubescore@v1.0.3
      - name: Setup python toml
        run: pip install toml
      - name: Run kube-score
        run: helm template deploy | kube-score score -
      - name: Check if Chart.yaml is up to date
        run: ./deploy/generate.py | diff ./deploy/Chart.yaml -

  deploy-main-stage:
    name: Deploy main to staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [accept]
    environment: stage
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_STAGE_REGION }}
          role-to-assume: ${{ secrets.AWS_STAGE_ROLE }}
          role-duration-seconds: 900
      - name: Connect to EKS cluster
        run: aws eks update-kubeconfig
          --region ${{ secrets.AWS_STAGE_REGION }}
          --name ${{ secrets.AWS_STAGE_CLUSTER }}
      - name: Helm install
        run: helm upgrade "${{ github.event.repository.name }}" ./deploy
          --install --atomic --timeout 120s
          --namespace "${{ github.event.repository.name }}"
          --set image.tag="${{ github.sha }}"
          --set ingress.host=signup.stage-crypto.worldcoin.dev
          --set environment=stage
          --set wipeDisk=true
          --set env.ETHEREUM_PROVIDER="${{ secrets.ALCHEMY_MUMBAI_RPC_ENDPOINT }}"
          --set env.SIGNING_KEY="${{ secrets.ACCOUNT_PRIVATE_KEY }}"
          --set env.SEMAPHORE_ADDRESS="${{ secrets.SEMAPHORE_CONTRACT_ADDRESS }}"
          --set env.SIGNUP_SEQUENCER_MOCK=false
          --set env.WIPE_STORAGE=true
          --set persistentStorage.volumeID=aws://us-east-1a/vol-0b4f10016a30379d7

  deploy-stage-manual:
    name: Manual deploy to staging
    runs-on: ubuntu-latest
    needs: [image_manifest]
    environment: stage-manual
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_STAGE_REGION }}
          role-to-assume: ${{ secrets.AWS_STAGE_ROLE }}
          role-duration-seconds: 900
      - name: Connect to EKS cluster
        run: aws eks update-kubeconfig
          --region ${{ secrets.AWS_STAGE_REGION }}
          --name ${{ secrets.AWS_STAGE_CLUSTER }}
      - name: Helm install
        run: helm upgrade "${{ github.event.repository.name }}" ./deploy
          --install --atomic --timeout 120s
          --namespace "${{ github.event.repository.name }}"
          --set image.tag="${{ github.sha }}"
          --set ingress.host=signup.stage-crypto.worldcoin.dev
          --set environment=stage
          --set wipeDisk=true
          --set env.ETHEREUM_PROVIDER="${{ secrets.ALCHEMY_MUMBAI_RPC_ENDPOINT }}"
          --set env.SIGNING_KEY="${{ secrets.ACCOUNT_PRIVATE_KEY }}"
          --set env.SEMAPHORE_ADDRESS="${{ secrets.SEMAPHORE_CONTRACT_ADDRESS }}"
          --set env.SIGNUP_SEQUENCER_MOCK=false
          --set env.WIPE_STORAGE=true
          --set persistentStorage.volumeID=aws://us-east-1a/vol-0b4f10016a30379d7

  deploy-prod:
    name: Deploy main to production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [ accept ]
    environment: prod
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_PROD_REGION }}
          role-to-assume: ${{ secrets.AWS_PROD_ROLE }}
          role-duration-seconds: 900
      - name: Connect to EKS cluster
        run: aws eks update-kubeconfig
          --region ${{ secrets.AWS_PROD_REGION }}
          --name ${{ secrets.AWS_PROD_CLUSTER }}
      - name: Helm install
        run: helm upgrade "${{ github.event.repository.name }}" ./deploy
          --install --atomic --timeout 120s
          --namespace "${{ github.event.repository.name }}"
          --set image.tag="${{ github.sha }}"
          --set environment=prod
          --set env.ETHEREUM_PROVIDER="${{ secrets.ALCHEMY_POLYGON_MAINNET_RPC_ENDPOINT }}"
          --set env.SIGNING_KEY="${{ secrets.MAINNET_ACCOUNT_PRIVATE_KEY }}"
          --set env.SEMAPHORE_ADDRESS="${{ secrets.MAINNET_SEMAPHORE_CONTRACT_ADDRESS }}"
          --set env.SIGNUP_SEQUENCER_MOCK=false
          --set env.WIPE_STORAGE=true
          --set env.USE_EIP1559=false