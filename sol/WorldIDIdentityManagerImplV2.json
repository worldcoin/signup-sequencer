{
  "abi": [
    {
      "inputs": [],
      "name": "CannotRenounceOwnership",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpiredRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ImplementationNotInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InvalidCommitment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStateBridgeAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedInputLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonExistentRoot",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "providedRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "latestRoot",
          "type": "uint256"
        }
      ],
      "name": "NotLatestRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProofValidationFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StateBridgeAlreadyDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StateBridgeAlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum WorldIDIdentityManagerImplV1.UnreducedElementType",
          "name": "elementType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "element",
          "type": "uint256"
        }
      ],
      "name": "UnreducedElement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "name": "UnsupportedTreeDepth",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum WorldIDIdentityManagerImplV1.Dependency",
          "name": "kind",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "DependencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOperator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "IdentityOperatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldExpiryTime",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newExpiryTime",
          "type": "uint256"
        }
      ],
      "name": "RootHistoryExpirySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isEnabled",
          "type": "bool"
        }
      ],
      "name": "StateBridgeStateChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "preRoot",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum WorldIDIdentityManagerImplV1.TreeChange",
          "name": "kind",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "postRoot",
          "type": "uint256"
        }
      ],
      "name": "TreeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_treeDepth",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialRoot",
          "type": "uint256"
        }
      ],
      "name": "WorldIDIdentityManagerImplInitialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NO_SUCH_ROOT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "root",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "supersededTimestamp",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ],
          "internalType": "struct WorldIDIdentityManagerImplV1.RootInfo",
          "name": "rootInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "packedDeletionIndices",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "preRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "batchSize",
          "type": "uint32"
        }
      ],
      "name": "calculateIdentityDeletionInputHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "startIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "preRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "identityCommitments",
          "type": "uint256[]"
        }
      ],
      "name": "calculateIdentityRegistrationInputHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "preRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint32[]",
          "name": "leafIndices",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "oldIdentities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newIdentities",
          "type": "uint256[]"
        }
      ],
      "name": "calculateIdentityUpdateInputHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[8]",
          "name": "deletionProof",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint32",
          "name": "batchSize",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "packedDeletionIndices",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "preRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "postRoot",
          "type": "uint256"
        }
      ],
      "name": "deleteIdentities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeleteIdentitiesVerifierLookupTableAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdentityUpdateVerifierLookupTableAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegisterIdentitiesVerifierLookupTableAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRootHistoryExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSemaphoreVerifierAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreeDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_treeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "initialRoot",
          "type": "uint256"
        },
        {
          "internalType": "contract VerifierLookupTable",
          "name": "_batchInsertionVerifiers",
          "type": "address"
        },
        {
          "internalType": "contract VerifierLookupTable",
          "name": "_batchUpdateVerifiers",
          "type": "address"
        },
        {
          "internalType": "contract ISemaphoreVerifier",
          "name": "_semaphoreVerifier",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VerifierLookupTable",
          "name": "_batchUpdateVerifiers",
          "type": "address"
        }
      ],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "queryRoot",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "root",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "supersededTimestamp",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "isValid",
              "type": "bool"
            }
          ],
          "internalType": "struct WorldIDIdentityManagerImplV1.RootInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[8]",
          "name": "insertionProof",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint256",
          "name": "preRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256[]",
          "name": "identityCommitments",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "postRoot",
          "type": "uint256"
        }
      ],
      "name": "registerIdentities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        }
      ],
      "name": "requireValidRoot",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VerifierLookupTable",
          "name": "newTable",
          "type": "address"
        }
      ],
      "name": "setDeleteIdentitiesVerifierLookupTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newIdentityOperator",
          "type": "address"
        }
      ],
      "name": "setIdentityOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VerifierLookupTable",
          "name": "newTable",
          "type": "address"
        }
      ],
      "name": "setIdentityUpdateVerifierLookupTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract VerifierLookupTable",
          "name": "newTable",
          "type": "address"
        }
      ],
      "name": "setRegisterIdentitiesVerifierLookupTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newExpiryTime",
          "type": "uint256"
        }
      ],
      "name": "setRootHistoryExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISemaphoreVerifier",
          "name": "newVerifier",
          "type": "address"
        }
      ],
      "name": "setSemaphoreVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[8]",
          "name": "updateProof",
          "type": "uint256[8]"
        },
        {
          "internalType": "uint256",
          "name": "preRoot",
          "type": "uint256"
        },
        {
          "internalType": "uint32[]",
          "name": "leafIndices",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "oldIdentities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newIdentities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "postRoot",
          "type": "uint256"
        }
      ],
      "name": "updateIdentities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "signalHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "externalNullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyProof",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b620000e8565b600054610100900460ff1615620000935760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e6576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051613e706200027e6000396000818161064e0152818161069701528181610775015281816107b501528181610b8d01528181610bcd0152818161100401528181611044015281816110fb0152818161113b015281816111e701528181611227015281816113270152818161136701528181611577015281816115b701528181611669015281816116a9015281816117ff0152818161183f015281816118ca0152818161190a01528181611985015281816119c501528181611a5c01528181611b0c01528181611b4c01528181611c9b01528181611cdb01528181611da701528181611de701528181611eaa01528181611eea01528181611f8101528181611fc1015281816120570152818161209701528181612177015281816121b70152818161226c015281816122ac0152818161248d015281816124cd015281816125e401528181612624015281816126b1015281816126f101528181612787015281816127c70152818161285b0152818161289b01528181612a8101528181612ac101528181612d3e0152612d7e0152613e706000f3fe6080604052600436106101f95760003560e01c8063715018a61161010d578063aa4a729e116100a0578063e30c39781161006f578063e30c3978146105bc578063f134b6ca146105da578063f2038f95146105ef578063f2358e1d14610604578063f2fde38b1461062457600080fd5b8063aa4a729e14610547578063b843b4e514610567578063c70aa72714610587578063d7b0fef1146105a757600080fd5b80638da5cb5b116100dc5780638da5cb5b146104cd5780638e5cdd50146104eb5780638fc22e9f14610512578063a7bba5821461052757600080fd5b8063715018a61461046357806379ba50971461047857806386ec599a1461048d5780638c76a909146104ad57600080fd5b806338c87065116101905780634f1ef2861161015f5780634f1ef286146103c25780634ffbdde5146103d557806352d1902d146103ea578063561f204b146103ff5780636b0566001461044357600080fd5b806338c87065146103135780633e8919b6146103335780633f7c178d1461036057806343f974cb146103ad57600080fd5b80632f059fca116101cc5780632f059fca1461028057806331e4e992146102a0578063354ca120146102d35780633659cfe6146102f357600080fd5b80630e3a12f3146101fe5780632217b2111461022057806323cfdba51461024057806329b6eca914610260575b600080fd5b34801561020a57600080fd5b5061021e610219366004613375565b610644565b005b34801561022c57600080fd5b5061021e61023b366004613404565b61076b565b34801561024c57600080fd5b5061021e61025b3660046134c3565b610b83565b34801561026c57600080fd5b5061021e61027b366004613375565b610f4c565b34801561028c57600080fd5b5061021e61029b366004613375565b610ffa565b3480156102ac57600080fd5b506102c06102bb36600461353c565b6110ef565b6040519081526020015b60405180910390f35b3480156102df57600080fd5b5061021e6102ee3660046135a3565b6111dd565b3480156102ff57600080fd5b5061021e61030e366004613375565b61131d565b34801561031f57600080fd5b5061021e61032e3660046135e2565b6113e5565b34801561033f57600080fd5b5061034861156b565b6040516001600160a01b0390911681526020016102ca565b34801561036c57600080fd5b5061038061037b366004613650565b611642565b60408051825181526020808401516001600160801b031690820152918101511515908201526060016102ca565b3480156103b957600080fd5b506102c06117f3565b61021e6103d03660046136ac565b6118c0565b3480156103e157600080fd5b50610348611979565b3480156103f657600080fd5b506102c0611a4f565b34801561040b57600080fd5b506040805160608082018352600080835260208084018290529284018190528351918201845280825291810182905291820152610380565b34801561044f57600080fd5b5061021e61045e366004613375565b611b02565b34801561046f57600080fd5b5061021e611bf7565b34801561048457600080fd5b5061021e611c18565b34801561049957600080fd5b506102c06104a8366004613758565b611c8f565b3480156104b957600080fd5b506102c06104c8366004613805565b611d9b565b3480156104d957600080fd5b506033546001600160a01b0316610348565b3480156104f757600080fd5b50610500611e9e565b60405160ff90911681526020016102ca565b34801561051e57600080fd5b50610348611f75565b34801561053357600080fd5b50610348610542366004613375565b61204b565b34801561055357600080fd5b5061021e610562366004613375565b61216d565b34801561057357600080fd5b5061021e61058236600461386d565b612262565b34801561059357600080fd5b5061021e6105a2366004613650565b612483565b3480156105b357600080fd5b506102c06125d8565b3480156105c857600080fd5b506065546001600160a01b0316610348565b3480156105e657600080fd5b506103486126a5565b3480156105fb57600080fd5b5061034861277b565b34801561061057600080fd5b5061021e61061f366004613650565b612851565b34801561063057600080fd5b5061021e61063f366004613375565b61298e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106955760405162461bcd60e51b815260040161068c90613930565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106c76129ff565b6001600160a01b0316146106ed5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661071057604051630103019560e11b815260040160405180910390fd5b610718612a1b565b61013380546001600160a01b038381166001600160a01b03198316811790935516908160045b6040517fd194b8423e9cb3c7cbebbbc3fe7f79dc2cbe0b40e03270d975abff491504c7b190600090a45050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107b35760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107e56129ff565b6001600160a01b03161461080b5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661082e57604051630103019560e11b815260040160405180910390fd5b61012d546001600160a01b0316331461085c5760405163472511eb60e11b815233600482015260240161068c565b61012e54851461088e5761012e5460405163542fced960e11b815261068c918791600401918252602082015260400190565b600061089d8587848787611d9b565b905060006108cb7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836139c8565b61013154604051638a283fc360e01b8152600481018790529192506000916001600160a01b0390911690638a283fc390602401602060405180830381865afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906139ea565b9050806001600160a01b03166343753b4d60405180604001604052808c60006008811061096e5761096e613a07565b602002013581526020018c60016008811061098b5761098b613a07565b60200201359052604080516080810182528d820135918101918252908190606082018f60036020020135815250815260200160405180604001604052808f6004600881106109db576109db613a07565b602002013581526020018f6005600881106109f8576109f8613a07565b60200201359052905260408051808201909152808e6006602002013581526020018e600760088110610a2c57610a2c613a07565b60200201358152506040518060200160405280888152506040518563ffffffff1660e01b8152600401610a629493929190613a40565b6020604051808303816000875af1925050508015610a9d575060408051601f3d908101601f19168201909252610a9a91810190613ae7565b60015b610afd57610aa9613b09565b806308c379a003610ae25750610abd613b24565b80610ac85750610ae4565b8060405162461bcd60e51b815260040161068c9190613bd2565b505b604051631e716a8b60e01b815260040160405180910390fd5b80610b1b57604051631e716a8b60e01b815260040160405180910390fd5b61012e859055600089815261012f6020526040812080546001600160801b031916426001600160801b031617905585906040518b907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a4505b505050505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610bcb5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bfd6129ff565b6001600160a01b031614610c235760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16610c4657604051630103019560e11b815260040160405180910390fd5b61012d546001600160a01b03163314610c745760405163472511eb60e11b815233600482015260240161068c565b61012e548214610ca65761012e5460405163542fced960e11b815261068c918491600401918252602082015260400190565b6000610cb5858585858a6110ef565b90506000610ce37f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836139c8565b61013554604051638a283fc360e01b815263ffffffff8a1660048201529192506000916001600160a01b0390911690638a283fc390602401602060405180830381865afa158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c91906139ea565b9050806001600160a01b03166343753b4d60405180604001604052808c600060088110610d8b57610d8b613a07565b602002013581526020018c600160088110610da857610da8613a07565b60200201359052604080516080810182528d820135918101918252908190606082018f60036020020135815250815260200160405180604001604052808f600460088110610df857610df8613a07565b602002013581526020018f600560088110610e1557610e15613a07565b60200201359052905260408051808201909152808e6006602002013581526020018e600760088110610e4957610e49613a07565b60200201358152506040518060200160405280888152506040518563ffffffff1660e01b8152600401610e7f9493929190613a40565b6020604051808303816000875af1925050508015610eba575060408051601f3d908101601f19168201909252610eb791810190613ae7565b60015b610ec657610aa9613b09565b80610ee457604051631e716a8b60e01b815260040160405180910390fd5b61012e859055600086815261012f6020526040902080546001600160801b031916426001600160801b031617905584600160405188907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a450505050505050505050565b600054600290610100900460ff16158015610f6e575060005460ff8083169116105b610f8a5760405162461bcd60e51b815260040161068c90613c05565b6000805461013580546001600160a01b0319166001600160a01b03861617905561ff001961010060ff851661ffff19909316831717169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110425760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110746129ff565b6001600160a01b03161461109a5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff166110bd57604051630103019560e11b815260040160405180910390fd5b6110c5612a1b565b61013180546001600160a01b038381166001600160a01b031983168117909355169081600161073e565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111395760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661116b6129ff565b6001600160a01b0316146111915760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff166111b457604051630103019560e11b815260040160405180910390fd5b604051600483028088833781810195865260209095019390935250506040909101902092915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036112255760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112576129ff565b6001600160a01b03161461127d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff166112a057604051630103019560e11b815260040160405180910390fd5b6112a985612851565b6101335461013454604051634d65479560e11b81526001600160a01b0390921691639aca8f2a916112f191899188918a9189918991600160a81b900460ff1690600401613c53565b60006040518083038186803b15801561130957600080fd5b505afa158015610b78573d6000803e3d6000fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036113655760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113976129ff565b6001600160a01b0316146113bd5760405162461bcd60e51b815260040161068c9061397c565b6113c681612a77565b604080516000808252602082019092526113e291839190612b1f565b50565b600054600190610100900460ff16158015611407575060005460ff8083169116105b6114235760405162461bcd60e51b815260040161068c90613c05565b6000805461ffff191660ff83161761010017905561143f612c8f565b61144886612cbe565b61146a57604051630220cee360e61b815260ff8716600482015260240161068c565b610134805460ff60a81b1916600160a81b60ff891602179055610e106101305561012e85905561013180546001600160a01b03199081166001600160a01b0387811691909117909255610132805482168684161790556101338054821685841617905560335461012d80549190931691161790556114e6612ce5565b6040805160ff88168152602081018790527fd1bcc66c061c32a21f569d138c2dadef4a38a0636309881954af5f44010ec1d8910160405180910390a16000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115b55760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166115e76129ff565b6001600160a01b03161461160d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661163057604051630103019560e11b815260040160405180910390fd5b50610135546001600160a01b03165b90565b60408051606081018252600080825260208201819052918101919091526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036116a75760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116d96129ff565b6001600160a01b0316146116ff5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661172257604051630103019560e11b815260040160405180910390fd5b61012e5482036117515750506040805160608101825261012e5481526000602082015260019181019190915290565b600082815261012f60205260408120546001600160801b0316908190036117ac5760408051606080820183526000808352602080840182905292840181905283519182018452808252918101829052918201525b9392505050565b610130546000906117c66001600160801b03841642613c8f565b604080516060810182528781526001600160801b039095166020860152911015908301525090505b919050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361183d5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661186f6129ff565b6001600160a01b0316146118955760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff166118b857604051630103019560e11b815260040160405180910390fd5b506101305490565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119085760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661193a6129ff565b6001600160a01b0316146119605760405162461bcd60e51b815260040161068c9061397c565b61196982612a77565b61197582826001612b1f565b5050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119c35760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166119f56129ff565b6001600160a01b031614611a1b5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611a3e57604051630103019560e11b815260040160405180910390fd5b50610132546001600160a01b031690565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611aef5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161068c565b50600080516020613df483398151915290565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611b4a5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611b7c6129ff565b6001600160a01b031614611ba25760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611bc557604051630103019560e11b815260040160405180910390fd5b611bcd612a1b565b61013280546001600160a01b038381166001600160a01b031983168117909355169081600361073e565b611bff612a1b565b6040516377aeb0ad60e01b815260040160405180910390fd5b60655433906001600160a01b03168114611c865760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161068c565b6113e281612d1b565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611cd95760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611d0b6129ff565b6001600160a01b031614611d315760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611d5457604051630103019560e11b815260040160405180910390fd5b60008989898989898989604051602001611d75989796959493929190613cd9565b60408051601f1981840301815291905280516020909101209a9950505050505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611de55760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611e176129ff565b6001600160a01b031614611e3d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611e6057604051630103019560e11b815260040160405180910390fd5b60008686868686604051602001611e7b959493929190613d3d565b60408051601f198184030181529190528051602090910120979650505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611ee85760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611f1a6129ff565b6001600160a01b031614611f405760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611f6357604051630103019560e11b815260040160405180910390fd5b5061013454600160a81b900460ff1690565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611fbf5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611ff16129ff565b6001600160a01b0316146120175760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661203a57604051630103019560e11b815260040160405180910390fd5b50610131546001600160a01b031690565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036120955760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166120c76129ff565b6001600160a01b0316146120ed5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661211057604051630103019560e11b815260040160405180910390fd5b612118612a1b565b61012d80546001600160a01b038481166001600160a01b0319831681179093556040519116919082907f5a674c516c196404869e5f502b5634ce442416bb016dde54b5de4c812cc019e690600090a392915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036121b55760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166121e76129ff565b6001600160a01b03161461220d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661223057604051630103019560e11b815260040160405180910390fd5b612238612a1b565b61013580546001600160a01b038381166001600160a01b031983168117909355169081600261073e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036122aa5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166122dc6129ff565b6001600160a01b0316146123025760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661232557604051630103019560e11b815260040160405180910390fd5b61012d546001600160a01b031633146123535760405163472511eb60e11b815233600482015260240161068c565b61012e5488146123855761012e5460405163542fced960e11b815261068c918a91600401918252602082015260400190565b85841415806123945750858214155b156123b25760405163a0b1d72d60e01b815260040160405180910390fd5b60006123c489838a8a8a8a8a8a611c8f565b905060006123f27f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836139c8565b61013254604051638a283fc360e01b8152600481018b90529192506000916001600160a01b0390911690638a283fc390602401602060405180830381865afa158015612442573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246691906139ea565b9050612475818d848e88612d34565b505050505050505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036124cb5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166124fd6129ff565b6001600160a01b0316146125235760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661254657604051630103019560e11b815260040160405180910390fd5b61254e612a1b565b8060000361259e5760405162461bcd60e51b815260206004820152601b60248201527f4578706972792074696d652063616e6e6f74206265207a65726f2e0000000000604482015260640161068c565b610130805490829055604051829082907ff62a6f06fde00a303cd5939e6b53762854412c96a196cda26720cedd28af9e7090600090a35050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036126225760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166126546129ff565b6001600160a01b03161461267a5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661269d57604051630103019560e11b815260040160405180910390fd5b5061012e5490565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036126ef5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166127216129ff565b6001600160a01b0316146127475760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661276a57604051630103019560e11b815260040160405180910390fd5b5061012d546001600160a01b031690565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036127c55760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166127f76129ff565b6001600160a01b03161461281d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661284057604051630103019560e11b815260040160405180910390fd5b50610133546001600160a01b031690565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036128995760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166128cb6129ff565b6001600160a01b0316146128f15760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661291457604051630103019560e11b815260040160405180910390fd5b61012e5481146113e257600081815261012f60205260408120546001600160801b0316908190036129585760405163ddae3b7160e01b815260040160405180910390fd5b6101305461296f6001600160801b03831642613c8f565b111561197557604051631d739acf60e11b815260040160405180910390fd5b612996612a1b565b606580546001600160a01b0383166001600160a01b031990911681179091556129c76033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080516020613df4833981519152546001600160a01b031690565b6033546001600160a01b03163314612a755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068c565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612abf5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612af16129ff565b6001600160a01b031614612b175760405162461bcd60e51b815260040161068c9061397c565b6113e2612a1b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612b5757612b528361302b565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612bb1575060408051601f3d908101601f19168201909252612bae91810190613d73565b60015b612c145760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161068c565b600080516020613df48339815191528114612c835760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161068c565b50612b528383836130c7565b600054610100900460ff16612cb65760405162461bcd60e51b815260040161068c90613d8c565b612a756130f2565b60006010602060ff84168211801590612cdd57508060ff168460ff1611155b949350505050565b600054610100900460ff16612d0c5760405162461bcd60e51b815260040161068c90613d8c565b60fb805460ff19166001179055565b606580546001600160a01b03191690556113e281613129565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612d7c5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612dae6129ff565b6001600160a01b031614612dd45760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16612df757604051630103019560e11b815260040160405180910390fd5b61012d546001600160a01b03163314612e255760405163472511eb60e11b815233600482015260240161068c565b6000604051806040016040528086600060088110612e4557612e45613a07565b6020020135815260200186600160088110612e6257612e62613a07565b6020020135905260408051608081018252878201359181019182529192506000919081906060820189600360200201358152508152602001604051806040016040528089600460088110612eb857612eb8613a07565b6020020135815260200189600560088110612ed557612ed5613a07565b60200201359052905260408051808201909152909150600090808860066020020135815260200188600760088110612f0f57612f0f613a07565b6020020135815250905060006040518060200160405280888152509050886001600160a01b03166343753b4d858585856040518563ffffffff1660e01b8152600401612f5e9493929190613a40565b6020604051808303816000875af1925050508015612f99575060408051601f3d908101601f19168201909252612f9691810190613ae7565b60015b612fa557610aa9613b09565b80612fc357604051631e716a8b60e01b815260040160405180910390fd5b61012e869055600087815261012f6020526040902080546001600160801b031916426001600160801b031617905585600260405189907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a450505050505050505050565b6001600160a01b0381163b6130985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161068c565b600080516020613df483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6130d08361317b565b6000825111806130dd5750805b15612b52576130ec83836131bb565b50505050565b600054610100900460ff166131195760405162461bcd60e51b815260040161068c90613d8c565b6131216132b1565b612a756132e0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6131848161302b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6132235760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161068c565b600080846001600160a01b03168460405161323e9190613dd7565b600060405180830381855af49150503d8060008114613279576040519150601f19603f3d011682016040523d82523d6000602084013e61327e565b606091505b50915091506132a68282604051806060016040528060278152602001613e1460279139613307565b925050505b92915050565b600054610100900460ff166132d85760405162461bcd60e51b815260040161068c90613d8c565b612a75613320565b600054610100900460ff16612a755760405162461bcd60e51b815260040161068c90613d8c565b606083156133165750816117a5565b6117a58383613350565b600054610100900460ff166133475760405162461bcd60e51b815260040161068c90613d8c565b612a7533612d1b565b815115610ac85781518083602001fd5b6001600160a01b03811681146113e257600080fd5b60006020828403121561338757600080fd5b81356117a581613360565b8061010081018310156132ab57600080fd5b803563ffffffff811681146117ee57600080fd5b60008083601f8401126133ca57600080fd5b50813567ffffffffffffffff8111156133e257600080fd5b6020830191508360208260051b85010111156133fd57600080fd5b9250929050565b600080600080600080610180878903121561341e57600080fd5b6134288888613392565b9550610100870135945061343f61012088016133a4565b935061014087013567ffffffffffffffff81111561345c57600080fd5b61346889828a016133b8565b979a969950949794969561016090950135949350505050565b60008083601f84011261349357600080fd5b50813567ffffffffffffffff8111156134ab57600080fd5b6020830191508360208285010111156133fd57600080fd5b60008060008060008061018087890312156134dd57600080fd5b6134e78888613392565b95506134f661010088016133a4565b945061012087013567ffffffffffffffff81111561351357600080fd5b61351f89828a01613481565b979a96995097610140810135966101609091013595509350505050565b60008060008060006080868803121561355457600080fd5b853567ffffffffffffffff81111561356b57600080fd5b61357788828901613481565b9096509450506020860135925060408601359150613597606087016133a4565b90509295509295909350565b600080600080600061018086880312156135bc57600080fd5b853594506020860135935060408601359250606086013591506135978760808801613392565b600080600080600060a086880312156135fa57600080fd5b853560ff8116811461360b57600080fd5b945060208601359350604086013561362281613360565b9250606086013561363281613360565b9150608086013561364281613360565b809150509295509295909350565b60006020828403121561366257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156136a5576136a5613669565b6040525050565b600080604083850312156136bf57600080fd5b82356136ca81613360565b915060208381013567ffffffffffffffff808211156136e857600080fd5b818601915086601f8301126136fc57600080fd5b81358181111561370e5761370e613669565b6040519150613726601f8201601f191685018361367f565b808252878482850101111561373a57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060008060008060008060a0898b03121561377457600080fd5b8835975060208901359650604089013567ffffffffffffffff8082111561379a57600080fd5b6137a68c838d016133b8565b909850965060608b01359150808211156137bf57600080fd5b6137cb8c838d016133b8565b909650945060808b01359150808211156137e457600080fd5b506137f18b828c016133b8565b999c989b5096995094979396929594505050565b60008060008060006080868803121561381d57600080fd5b613826866133a4565b94506020860135935060408601359250606086013567ffffffffffffffff81111561385057600080fd5b61385c888289016133b8565b969995985093965092949392505050565b60008060008060008060008060006101a08a8c03121561388c57600080fd5b6138968b8b613392565b98506101008a013597506101208a013567ffffffffffffffff808211156138bc57600080fd5b6138c88d838e016133b8565b90995097506101408c01359150808211156138e257600080fd5b6138ee8d838e016133b8565b90975095506101608c013591508082111561390857600080fd5b506139158c828d016133b8565b9a9d999c50979a969995989497966101800135949350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000826139e557634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156139fc57600080fd5b81516117a581613360565b634e487b7160e01b600052603260045260246000fd5b8060005b60028110156130ec578151845260209384019390910190600101613a21565b6101208101613a4f8287613a1d565b60408083018660005b6002808210613a675750613aa2565b82518460005b83811015613a8b578251825260209283019290910190600101613a6d565b505050928401925060209190910190600101613a58565b50505050613ab360c0830185613a1d565b61010082018360005b6001811015613adb578151835260209283019290910190600101613abc565b50505095945050505050565b600060208284031215613af957600080fd5b815180151581146117a557600080fd5b600060033d111561163f5760046000803e5060005160e01c90565b600060443d1015613b325790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613b6257505050505090565b8285019150815181811115613b7a5750505050505090565b843d8701016020828501011115613b945750505050505090565b613ba36020828601018761367f565b509095945050505050565b60005b83811015613bc9578181015183820152602001613bb1565b50506000910152565b6020815260008251806020840152613bf1816040850160208701613bae565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006101a08201905087825286602083015285604083015284606083015261010084608084013760ff8316610180830152979650505050505050565b818103818111156132ab57634e487b7160e01b600052601160045260246000fd5b60006001600160fb1b03831115613cc657600080fd5b8260051b80838637939093019392505050565b888152600060208981840152604083018960005b8a811015613d165763ffffffff613d03836133a4565b1683529183019190830190600101613ced565b5050613d2d613d2682898b613cb0565b8688613cb0565b9c9b505050505050505050505050565b63ffffffff60e01b8660e01b1681528460048201528360248201526000613d68604483018486613cb0565b979650505050505050565b600060208284031215613d8557600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613de9818460208701613bae565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202258b63db6550ae18ade93a6816c682fce5f6960e9619c49b1085dddff743c4364736f6c63430008150033",
    "sourceMap": "443:11607:43:-:0;;;1332:4:23;1289:48;;443:11607:43;;;;;;;;;-1:-1:-1;12497:22:42;:20;:22::i;:::-;443:11607:43;;5928:279:22;5996:13;;;;;;;5995:14;5987:66;;;;-1:-1:-1;;;5987:66:22;;216:2:80;5987:66:22;;;198:21:80;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:80;;;338:37;392:19;;5987:66:22;;;;;;;;6067:12;;6082:15;6067:12;;;:30;6063:138;;;6113:12;:30;;-1:-1:-1;;6113:30:22;6128:15;6113:30;;;;;;6162:28;;564:36:80;;;6162:28:22;;552:2:80;537:18;6162:28:22;;;;;;;6063:138;5928:279::o;422:184:80:-;443:11607:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101f95760003560e01c8063715018a61161010d578063aa4a729e116100a0578063e30c39781161006f578063e30c3978146105bc578063f134b6ca146105da578063f2038f95146105ef578063f2358e1d14610604578063f2fde38b1461062457600080fd5b8063aa4a729e14610547578063b843b4e514610567578063c70aa72714610587578063d7b0fef1146105a757600080fd5b80638da5cb5b116100dc5780638da5cb5b146104cd5780638e5cdd50146104eb5780638fc22e9f14610512578063a7bba5821461052757600080fd5b8063715018a61461046357806379ba50971461047857806386ec599a1461048d5780638c76a909146104ad57600080fd5b806338c87065116101905780634f1ef2861161015f5780634f1ef286146103c25780634ffbdde5146103d557806352d1902d146103ea578063561f204b146103ff5780636b0566001461044357600080fd5b806338c87065146103135780633e8919b6146103335780633f7c178d1461036057806343f974cb146103ad57600080fd5b80632f059fca116101cc5780632f059fca1461028057806331e4e992146102a0578063354ca120146102d35780633659cfe6146102f357600080fd5b80630e3a12f3146101fe5780632217b2111461022057806323cfdba51461024057806329b6eca914610260575b600080fd5b34801561020a57600080fd5b5061021e610219366004613375565b610644565b005b34801561022c57600080fd5b5061021e61023b366004613404565b61076b565b34801561024c57600080fd5b5061021e61025b3660046134c3565b610b83565b34801561026c57600080fd5b5061021e61027b366004613375565b610f4c565b34801561028c57600080fd5b5061021e61029b366004613375565b610ffa565b3480156102ac57600080fd5b506102c06102bb36600461353c565b6110ef565b6040519081526020015b60405180910390f35b3480156102df57600080fd5b5061021e6102ee3660046135a3565b6111dd565b3480156102ff57600080fd5b5061021e61030e366004613375565b61131d565b34801561031f57600080fd5b5061021e61032e3660046135e2565b6113e5565b34801561033f57600080fd5b5061034861156b565b6040516001600160a01b0390911681526020016102ca565b34801561036c57600080fd5b5061038061037b366004613650565b611642565b60408051825181526020808401516001600160801b031690820152918101511515908201526060016102ca565b3480156103b957600080fd5b506102c06117f3565b61021e6103d03660046136ac565b6118c0565b3480156103e157600080fd5b50610348611979565b3480156103f657600080fd5b506102c0611a4f565b34801561040b57600080fd5b506040805160608082018352600080835260208084018290529284018190528351918201845280825291810182905291820152610380565b34801561044f57600080fd5b5061021e61045e366004613375565b611b02565b34801561046f57600080fd5b5061021e611bf7565b34801561048457600080fd5b5061021e611c18565b34801561049957600080fd5b506102c06104a8366004613758565b611c8f565b3480156104b957600080fd5b506102c06104c8366004613805565b611d9b565b3480156104d957600080fd5b506033546001600160a01b0316610348565b3480156104f757600080fd5b50610500611e9e565b60405160ff90911681526020016102ca565b34801561051e57600080fd5b50610348611f75565b34801561053357600080fd5b50610348610542366004613375565b61204b565b34801561055357600080fd5b5061021e610562366004613375565b61216d565b34801561057357600080fd5b5061021e61058236600461386d565b612262565b34801561059357600080fd5b5061021e6105a2366004613650565b612483565b3480156105b357600080fd5b506102c06125d8565b3480156105c857600080fd5b506065546001600160a01b0316610348565b3480156105e657600080fd5b506103486126a5565b3480156105fb57600080fd5b5061034861277b565b34801561061057600080fd5b5061021e61061f366004613650565b612851565b34801561063057600080fd5b5061021e61063f366004613375565b61298e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036106955760405162461bcd60e51b815260040161068c90613930565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106c76129ff565b6001600160a01b0316146106ed5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661071057604051630103019560e11b815260040160405180910390fd5b610718612a1b565b61013380546001600160a01b038381166001600160a01b03198316811790935516908160045b6040517fd194b8423e9cb3c7cbebbbc3fe7f79dc2cbe0b40e03270d975abff491504c7b190600090a45050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036107b35760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107e56129ff565b6001600160a01b03161461080b5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661082e57604051630103019560e11b815260040160405180910390fd5b61012d546001600160a01b0316331461085c5760405163472511eb60e11b815233600482015260240161068c565b61012e54851461088e5761012e5460405163542fced960e11b815261068c918791600401918252602082015260400190565b600061089d8587848787611d9b565b905060006108cb7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836139c8565b61013154604051638a283fc360e01b8152600481018790529192506000916001600160a01b0390911690638a283fc390602401602060405180830381865afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906139ea565b9050806001600160a01b03166343753b4d60405180604001604052808c60006008811061096e5761096e613a07565b602002013581526020018c60016008811061098b5761098b613a07565b60200201359052604080516080810182528d820135918101918252908190606082018f60036020020135815250815260200160405180604001604052808f6004600881106109db576109db613a07565b602002013581526020018f6005600881106109f8576109f8613a07565b60200201359052905260408051808201909152808e6006602002013581526020018e600760088110610a2c57610a2c613a07565b60200201358152506040518060200160405280888152506040518563ffffffff1660e01b8152600401610a629493929190613a40565b6020604051808303816000875af1925050508015610a9d575060408051601f3d908101601f19168201909252610a9a91810190613ae7565b60015b610afd57610aa9613b09565b806308c379a003610ae25750610abd613b24565b80610ac85750610ae4565b8060405162461bcd60e51b815260040161068c9190613bd2565b505b604051631e716a8b60e01b815260040160405180910390fd5b80610b1b57604051631e716a8b60e01b815260040160405180910390fd5b61012e859055600089815261012f6020526040812080546001600160801b031916426001600160801b031617905585906040518b907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a4505b505050505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610bcb5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bfd6129ff565b6001600160a01b031614610c235760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16610c4657604051630103019560e11b815260040160405180910390fd5b61012d546001600160a01b03163314610c745760405163472511eb60e11b815233600482015260240161068c565b61012e548214610ca65761012e5460405163542fced960e11b815261068c918491600401918252602082015260400190565b6000610cb5858585858a6110ef565b90506000610ce37f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836139c8565b61013554604051638a283fc360e01b815263ffffffff8a1660048201529192506000916001600160a01b0390911690638a283fc390602401602060405180830381865afa158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c91906139ea565b9050806001600160a01b03166343753b4d60405180604001604052808c600060088110610d8b57610d8b613a07565b602002013581526020018c600160088110610da857610da8613a07565b60200201359052604080516080810182528d820135918101918252908190606082018f60036020020135815250815260200160405180604001604052808f600460088110610df857610df8613a07565b602002013581526020018f600560088110610e1557610e15613a07565b60200201359052905260408051808201909152808e6006602002013581526020018e600760088110610e4957610e49613a07565b60200201358152506040518060200160405280888152506040518563ffffffff1660e01b8152600401610e7f9493929190613a40565b6020604051808303816000875af1925050508015610eba575060408051601f3d908101601f19168201909252610eb791810190613ae7565b60015b610ec657610aa9613b09565b80610ee457604051631e716a8b60e01b815260040160405180910390fd5b61012e859055600086815261012f6020526040902080546001600160801b031916426001600160801b031617905584600160405188907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a450505050505050505050565b600054600290610100900460ff16158015610f6e575060005460ff8083169116105b610f8a5760405162461bcd60e51b815260040161068c90613c05565b6000805461013580546001600160a01b0319166001600160a01b03861617905561ff001961010060ff851661ffff19909316831717169091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110425760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110746129ff565b6001600160a01b03161461109a5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff166110bd57604051630103019560e11b815260040160405180910390fd5b6110c5612a1b565b61013180546001600160a01b038381166001600160a01b031983168117909355169081600161073e565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111395760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661116b6129ff565b6001600160a01b0316146111915760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff166111b457604051630103019560e11b815260040160405180910390fd5b604051600483028088833781810195865260209095019390935250506040909101902092915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036112255760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166112576129ff565b6001600160a01b03161461127d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff166112a057604051630103019560e11b815260040160405180910390fd5b6112a985612851565b6101335461013454604051634d65479560e11b81526001600160a01b0390921691639aca8f2a916112f191899188918a9189918991600160a81b900460ff1690600401613c53565b60006040518083038186803b15801561130957600080fd5b505afa158015610b78573d6000803e3d6000fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036113655760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166113976129ff565b6001600160a01b0316146113bd5760405162461bcd60e51b815260040161068c9061397c565b6113c681612a77565b604080516000808252602082019092526113e291839190612b1f565b50565b600054600190610100900460ff16158015611407575060005460ff8083169116105b6114235760405162461bcd60e51b815260040161068c90613c05565b6000805461ffff191660ff83161761010017905561143f612c8f565b61144886612cbe565b61146a57604051630220cee360e61b815260ff8716600482015260240161068c565b610134805460ff60a81b1916600160a81b60ff891602179055610e106101305561012e85905561013180546001600160a01b03199081166001600160a01b0387811691909117909255610132805482168684161790556101338054821685841617905560335461012d80549190931691161790556114e6612ce5565b6040805160ff88168152602081018790527fd1bcc66c061c32a21f569d138c2dadef4a38a0636309881954af5f44010ec1d8910160405180910390a16000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115b55760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166115e76129ff565b6001600160a01b03161461160d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661163057604051630103019560e11b815260040160405180910390fd5b50610135546001600160a01b03165b90565b60408051606081018252600080825260208201819052918101919091526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036116a75760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116d96129ff565b6001600160a01b0316146116ff5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661172257604051630103019560e11b815260040160405180910390fd5b61012e5482036117515750506040805160608101825261012e5481526000602082015260019181019190915290565b600082815261012f60205260408120546001600160801b0316908190036117ac5760408051606080820183526000808352602080840182905292840181905283519182018452808252918101829052918201525b9392505050565b610130546000906117c66001600160801b03841642613c8f565b604080516060810182528781526001600160801b039095166020860152911015908301525090505b919050565b60006001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361183d5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661186f6129ff565b6001600160a01b0316146118955760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff166118b857604051630103019560e11b815260040160405180910390fd5b506101305490565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119085760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661193a6129ff565b6001600160a01b0316146119605760405162461bcd60e51b815260040161068c9061397c565b61196982612a77565b61197582826001612b1f565b5050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036119c35760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166119f56129ff565b6001600160a01b031614611a1b5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611a3e57604051630103019560e11b815260040160405180910390fd5b50610132546001600160a01b031690565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611aef5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161068c565b50600080516020613df483398151915290565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611b4a5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611b7c6129ff565b6001600160a01b031614611ba25760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611bc557604051630103019560e11b815260040160405180910390fd5b611bcd612a1b565b61013280546001600160a01b038381166001600160a01b031983168117909355169081600361073e565b611bff612a1b565b6040516377aeb0ad60e01b815260040160405180910390fd5b60655433906001600160a01b03168114611c865760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161068c565b6113e281612d1b565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611cd95760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611d0b6129ff565b6001600160a01b031614611d315760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611d5457604051630103019560e11b815260040160405180910390fd5b60008989898989898989604051602001611d75989796959493929190613cd9565b60408051601f1981840301815291905280516020909101209a9950505050505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611de55760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611e176129ff565b6001600160a01b031614611e3d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611e6057604051630103019560e11b815260040160405180910390fd5b60008686868686604051602001611e7b959493929190613d3d565b60408051601f198184030181529190528051602090910120979650505050505050565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611ee85760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611f1a6129ff565b6001600160a01b031614611f405760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16611f6357604051630103019560e11b815260040160405180910390fd5b5061013454600160a81b900460ff1690565b60006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611fbf5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611ff16129ff565b6001600160a01b0316146120175760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661203a57604051630103019560e11b815260040160405180910390fd5b50610131546001600160a01b031690565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036120955760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166120c76129ff565b6001600160a01b0316146120ed5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661211057604051630103019560e11b815260040160405180910390fd5b612118612a1b565b61012d80546001600160a01b038481166001600160a01b0319831681179093556040519116919082907f5a674c516c196404869e5f502b5634ce442416bb016dde54b5de4c812cc019e690600090a392915050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036121b55760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166121e76129ff565b6001600160a01b03161461220d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661223057604051630103019560e11b815260040160405180910390fd5b612238612a1b565b61013580546001600160a01b038381166001600160a01b031983168117909355169081600261073e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036122aa5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166122dc6129ff565b6001600160a01b0316146123025760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661232557604051630103019560e11b815260040160405180910390fd5b61012d546001600160a01b031633146123535760405163472511eb60e11b815233600482015260240161068c565b61012e5488146123855761012e5460405163542fced960e11b815261068c918a91600401918252602082015260400190565b85841415806123945750858214155b156123b25760405163a0b1d72d60e01b815260040160405180910390fd5b60006123c489838a8a8a8a8a8a611c8f565b905060006123f27f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836139c8565b61013254604051638a283fc360e01b8152600481018b90529192506000916001600160a01b0390911690638a283fc390602401602060405180830381865afa158015612442573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246691906139ea565b9050612475818d848e88612d34565b505050505050505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036124cb5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166124fd6129ff565b6001600160a01b0316146125235760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661254657604051630103019560e11b815260040160405180910390fd5b61254e612a1b565b8060000361259e5760405162461bcd60e51b815260206004820152601b60248201527f4578706972792074696d652063616e6e6f74206265207a65726f2e0000000000604482015260640161068c565b610130805490829055604051829082907ff62a6f06fde00a303cd5939e6b53762854412c96a196cda26720cedd28af9e7090600090a35050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036126225760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166126546129ff565b6001600160a01b03161461267a5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661269d57604051630103019560e11b815260040160405180910390fd5b5061012e5490565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036126ef5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166127216129ff565b6001600160a01b0316146127475760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661276a57604051630103019560e11b815260040160405180910390fd5b5061012d546001600160a01b031690565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036127c55760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166127f76129ff565b6001600160a01b03161461281d5760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661284057604051630103019560e11b815260040160405180910390fd5b50610133546001600160a01b031690565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036128995760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166128cb6129ff565b6001600160a01b0316146128f15760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff1661291457604051630103019560e11b815260040160405180910390fd5b61012e5481146113e257600081815261012f60205260408120546001600160801b0316908190036129585760405163ddae3b7160e01b815260040160405180910390fd5b6101305461296f6001600160801b03831642613c8f565b111561197557604051631d739acf60e11b815260040160405180910390fd5b612996612a1b565b606580546001600160a01b0383166001600160a01b031990911681179091556129c76033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080516020613df4833981519152546001600160a01b031690565b6033546001600160a01b03163314612a755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068c565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612abf5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612af16129ff565b6001600160a01b031614612b175760405162461bcd60e51b815260040161068c9061397c565b6113e2612a1b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612b5757612b528361302b565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612bb1575060408051601f3d908101601f19168201909252612bae91810190613d73565b60015b612c145760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161068c565b600080516020613df48339815191528114612c835760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161068c565b50612b528383836130c7565b600054610100900460ff16612cb65760405162461bcd60e51b815260040161068c90613d8c565b612a756130f2565b60006010602060ff84168211801590612cdd57508060ff168460ff1611155b949350505050565b600054610100900460ff16612d0c5760405162461bcd60e51b815260040161068c90613d8c565b60fb805460ff19166001179055565b606580546001600160a01b03191690556113e281613129565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003612d7c5760405162461bcd60e51b815260040161068c90613930565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612dae6129ff565b6001600160a01b031614612dd45760405162461bcd60e51b815260040161068c9061397c565b60fb5460ff16612df757604051630103019560e11b815260040160405180910390fd5b61012d546001600160a01b03163314612e255760405163472511eb60e11b815233600482015260240161068c565b6000604051806040016040528086600060088110612e4557612e45613a07565b6020020135815260200186600160088110612e6257612e62613a07565b6020020135905260408051608081018252878201359181019182529192506000919081906060820189600360200201358152508152602001604051806040016040528089600460088110612eb857612eb8613a07565b6020020135815260200189600560088110612ed557612ed5613a07565b60200201359052905260408051808201909152909150600090808860066020020135815260200188600760088110612f0f57612f0f613a07565b6020020135815250905060006040518060200160405280888152509050886001600160a01b03166343753b4d858585856040518563ffffffff1660e01b8152600401612f5e9493929190613a40565b6020604051808303816000875af1925050508015612f99575060408051601f3d908101601f19168201909252612f9691810190613ae7565b60015b612fa557610aa9613b09565b80612fc357604051631e716a8b60e01b815260040160405180910390fd5b61012e869055600087815261012f6020526040902080546001600160801b031916426001600160801b031617905585600260405189907f25f6d5cc356ee0b49cf708c13c68197947f5740a878a298765e4b18e4afdaf0490600090a450505050505050505050565b6001600160a01b0381163b6130985760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161068c565b600080516020613df483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6130d08361317b565b6000825111806130dd5750805b15612b52576130ec83836131bb565b50505050565b600054610100900460ff166131195760405162461bcd60e51b815260040161068c90613d8c565b6131216132b1565b612a756132e0565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6131848161302b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6132235760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161068c565b600080846001600160a01b03168460405161323e9190613dd7565b600060405180830381855af49150503d8060008114613279576040519150601f19603f3d011682016040523d82523d6000602084013e61327e565b606091505b50915091506132a68282604051806060016040528060278152602001613e1460279139613307565b925050505b92915050565b600054610100900460ff166132d85760405162461bcd60e51b815260040161068c90613d8c565b612a75613320565b600054610100900460ff16612a755760405162461bcd60e51b815260040161068c90613d8c565b606083156133165750816117a5565b6117a58383613350565b600054610100900460ff166133475760405162461bcd60e51b815260040161068c90613d8c565b612a7533612d1b565b815115610ac85781518083602001fd5b6001600160a01b03811681146113e257600080fd5b60006020828403121561338757600080fd5b81356117a581613360565b8061010081018310156132ab57600080fd5b803563ffffffff811681146117ee57600080fd5b60008083601f8401126133ca57600080fd5b50813567ffffffffffffffff8111156133e257600080fd5b6020830191508360208260051b85010111156133fd57600080fd5b9250929050565b600080600080600080610180878903121561341e57600080fd5b6134288888613392565b9550610100870135945061343f61012088016133a4565b935061014087013567ffffffffffffffff81111561345c57600080fd5b61346889828a016133b8565b979a969950949794969561016090950135949350505050565b60008083601f84011261349357600080fd5b50813567ffffffffffffffff8111156134ab57600080fd5b6020830191508360208285010111156133fd57600080fd5b60008060008060008061018087890312156134dd57600080fd5b6134e78888613392565b95506134f661010088016133a4565b945061012087013567ffffffffffffffff81111561351357600080fd5b61351f89828a01613481565b979a96995097610140810135966101609091013595509350505050565b60008060008060006080868803121561355457600080fd5b853567ffffffffffffffff81111561356b57600080fd5b61357788828901613481565b9096509450506020860135925060408601359150613597606087016133a4565b90509295509295909350565b600080600080600061018086880312156135bc57600080fd5b853594506020860135935060408601359250606086013591506135978760808801613392565b600080600080600060a086880312156135fa57600080fd5b853560ff8116811461360b57600080fd5b945060208601359350604086013561362281613360565b9250606086013561363281613360565b9150608086013561364281613360565b809150509295509295909350565b60006020828403121561366257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156136a5576136a5613669565b6040525050565b600080604083850312156136bf57600080fd5b82356136ca81613360565b915060208381013567ffffffffffffffff808211156136e857600080fd5b818601915086601f8301126136fc57600080fd5b81358181111561370e5761370e613669565b6040519150613726601f8201601f191685018361367f565b808252878482850101111561373a57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060008060008060008060a0898b03121561377457600080fd5b8835975060208901359650604089013567ffffffffffffffff8082111561379a57600080fd5b6137a68c838d016133b8565b909850965060608b01359150808211156137bf57600080fd5b6137cb8c838d016133b8565b909650945060808b01359150808211156137e457600080fd5b506137f18b828c016133b8565b999c989b5096995094979396929594505050565b60008060008060006080868803121561381d57600080fd5b613826866133a4565b94506020860135935060408601359250606086013567ffffffffffffffff81111561385057600080fd5b61385c888289016133b8565b969995985093965092949392505050565b60008060008060008060008060006101a08a8c03121561388c57600080fd5b6138968b8b613392565b98506101008a013597506101208a013567ffffffffffffffff808211156138bc57600080fd5b6138c88d838e016133b8565b90995097506101408c01359150808211156138e257600080fd5b6138ee8d838e016133b8565b90975095506101608c013591508082111561390857600080fd5b506139158c828d016133b8565b9a9d999c50979a969995989497966101800135949350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000826139e557634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156139fc57600080fd5b81516117a581613360565b634e487b7160e01b600052603260045260246000fd5b8060005b60028110156130ec578151845260209384019390910190600101613a21565b6101208101613a4f8287613a1d565b60408083018660005b6002808210613a675750613aa2565b82518460005b83811015613a8b578251825260209283019290910190600101613a6d565b505050928401925060209190910190600101613a58565b50505050613ab360c0830185613a1d565b61010082018360005b6001811015613adb578151835260209283019290910190600101613abc565b50505095945050505050565b600060208284031215613af957600080fd5b815180151581146117a557600080fd5b600060033d111561163f5760046000803e5060005160e01c90565b600060443d1015613b325790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613b6257505050505090565b8285019150815181811115613b7a5750505050505090565b843d8701016020828501011115613b945750505050505090565b613ba36020828601018761367f565b509095945050505050565b60005b83811015613bc9578181015183820152602001613bb1565b50506000910152565b6020815260008251806020840152613bf1816040850160208701613bae565b601f01601f19169190910160400192915050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006101a08201905087825286602083015285604083015284606083015261010084608084013760ff8316610180830152979650505050505050565b818103818111156132ab57634e487b7160e01b600052601160045260246000fd5b60006001600160fb1b03831115613cc657600080fd5b8260051b80838637939093019392505050565b888152600060208981840152604083018960005b8a811015613d165763ffffffff613d03836133a4565b1683529183019190830190600101613ced565b5050613d2d613d2682898b613cb0565b8688613cb0565b9c9b505050505050505050505050565b63ffffffff60e01b8660e01b1681528460048201528360248201526000613d68604483018486613cb0565b979650505050505050565b600060208284031215613d8557600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251613de9818460208701613bae565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202258b63db6550ae18ade93a6816c682fce5f6960e9619c49b1085dddff743c4364736f6c63430008150033",
    "sourceMap": "443:11607:43:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37178:393:42;;;;;;;;;;-1:-1:-1;37178:393:42;;;;;:::i;:::-;;:::i;:::-;;17580:2498;;;;;;;;;;-1:-1:-1;17580:2498:42;;;;;:::i;:::-;;:::i;6380:2438:43:-;;;;;;;;;;-1:-1:-1;6380:2438:43;;;;;:::i;:::-;;:::i;3800:152::-;;;;;;;;;;-1:-1:-1;3800:152:43;;;;;:::i;:::-;;:::i;34738:423:42:-;;;;;;;;;;-1:-1:-1;34738:423:42;;;;;:::i;:::-;;:::i;11363:685:43:-;;;;;;;;;;-1:-1:-1;11363:685:43;;;;;:::i;:::-;;:::i;:::-;;;4125:25:80;;;4113:2;4098:18;11363:685:43;;;;;;;;40699:508:42;;;;;;;;;;-1:-1:-1;40699:508:42;;;;;:::i;:::-;;:::i;3317:197:23:-;;;;;;;;;;-1:-1:-1;3317:197:23;;;;;:::i;:::-;;:::i;13806:1014:42:-;;;;;;;;;;-1:-1:-1;13806:1014:42;;;;;:::i;:::-;;:::i;9156:228:43:-;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;6024:32:80;;;6006:51;;5994:2;5979:18;9156:228:43;5860:203:80;32299:567:42;;;;;;;;;;-1:-1:-1;32299:567:42;;;;;:::i;:::-;;:::i;:::-;;;;6471:13:80;;6453:32;;6545:4;6533:17;;;6527:24;-1:-1:-1;;;;;6523:65:80;6501:20;;;6494:95;6647:17;;;6641:24;6634:32;6627:40;6605:20;;;6598:70;6441:2;6426:18;32299:567:42;6253:421:80;37747:189:42;;;;;;;;;;;;;:::i;3763:222:23:-;;;;;;:::i;:::-;;:::i;35454:227:42:-;;;;;;;;;;;;;:::i;3006:131:23:-;;;;;;;;;;;;;:::i;7130:120:42:-;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;7218:25:42;;;;;;;;;;;;;;;;;;;;7130:120;;36071:416;;;;;;;;;;-1:-1:-1;36071:416:42;;;;;:::i;:::-;;:::i;4649:109:44:-;;;;;;;;;;;;;:::i;2010:206:17:-;;;;;;;;;;;;;:::i;31089:465:42:-;;;;;;;;;;-1:-1:-1;31089:465:42;;;;;:::i;:::-;;:::i;29135:413::-;;;;;;;;;;-1:-1:-1;29135:413:42;;;;;:::i;:::-;;:::i;1441:85:18:-;;;;;;;;;;-1:-1:-1;1513:6:18;;-1:-1:-1;;;;;1513:6:18;1441:85;;38714:119:42;;;;;;;;;;;;;:::i;:::-;;;10258:4:80;10246:17;;;10228:36;;10216:2;10201:18;38714:119:42;10086:184:80;34179:231:42;;;;;;;;;;;;;:::i;39480:384::-;;;;;;;;;;-1:-1:-1;39480:384:42;;;;;:::i;:::-;;:::i;9704:418:43:-;;;;;;;;;;-1:-1:-1;9704:418:43;;;;;:::i;:::-;;:::i;22820:1590:42:-;;;;;;;;;;-1:-1:-1;22820:1590:42;;;;;:::i;:::-;;:::i;38168:402::-;;;;;;;;;;-1:-1:-1;38168:402:42;;;;;:::i;:::-;;:::i;31682:121::-;;;;;;;;;;;;;:::i;1123:99:17:-;;;;;;;;;;-1:-1:-1;1202:13:17;;-1:-1:-1;;;;;1202:13:17;1123:99;;39054:133:42;;;;;;;;;;;;;:::i;36670:205::-;;;;;;;;;;;;;:::i;33309:638::-;;;;;;;;;;-1:-1:-1;33309:638:42;;;;;:::i;:::-;;:::i;1415:178:17:-;;;;;;;;;;-1:-1:-1;1415:178:17;;;;;:::i;:::-;;:::i;37178:393:42:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;;;;;;;;;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;1334:13:18::2;:11;:13::i;:::-;37378:17:42::3;::::0;;-1:-1:-1;;;;;37405:31:42;;::::3;-1:-1:-1::0;;;;;;37405:31:42;::::3;::::0;::::3;::::0;;;37378:17:::3;::::0;;37482:28:::3;37451:113;;::::0;::::3;::::0;;;::::3;37335:236;37178:393:::0;:::o;17580:2498::-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;41750:17:42::2;::::0;-1:-1:-1;;;;;41750:17:42::2;41736:10;:31;41732:93;;41790:24;::::0;-1:-1:-1;;;41790:24:42;;41803:10:::2;41790:24;::::0;::::2;6006:51:80::0;5979:18;;41790:24:42::2;5860:203:80::0;41732:93:42::2;17871:11:::3;;17860:7;:22;17856:95;;17928:11;::::0;17905:35:::3;::::0;-1:-1:-1;;;17905:35:42;;::::3;::::0;17919:7;;17905:35:::3;;12764:25:80::0;;;12820:2;12805:18;;12798:34;12752:2;12737:18;;12590:248;17856:95:42::3;18042:17;18062:112;18114:10;18126:7;18135:8;18145:19;;18062:38;:112::i;:::-;18042:132:::0;-1:-1:-1;18445:22:42::3;18470:39;4368:77;18042:132:::0;18470:39:::3;:::i;:::-;18639:23;::::0;:66:::3;::::0;-1:-1:-1;;;18639:66:42;;::::3;::::0;::::3;4125:25:80::0;;;18445:64:42;;-1:-1:-1;18593:31:42::3;::::0;-1:-1:-1;;;;;18639:23:42;;::::3;::::0;:38:::3;::::0;4098:18:80;;18639:66:42::3;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18593:112;;18774:17;-1:-1:-1::0;;;;;18774:29:42::3;;:267;;;;;;;;18818:14;18833:1;18818:17;;;;;;;:::i;:::-;;;;;18774:267;;;;18837:14;18852:1;18837:17;;;;;;;:::i;:::-;;;;;18774:267:::0;;::::3;::::0;;;;;;;18871:17;;::::3;;18774:267:::0;;::::3;::::0;;;;;;;;;18871:14;18905:1:::3;18890:17;;;;18774:267;;::::0;::::3;;;;;;;;;;;;18911:14;18926:1;18911:17;;;;;;;:::i;:::-;;;;;18774:267;;;;18930:14;18945:1;18930:17;;;;;;;:::i;:::-;;;;;18774:267:::0;;;;::::3;::::0;;;;::::3;::::0;;;;18964:14;18979:1:::3;18964:17;;;;18774:267;;;;18983:14;18998:1;18983:17;;;;;;;:::i;:::-;;;;;18774:267;;::::0;::::3;;;;;;;;19016:14;18774:267;;::::0;::::3;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;18774:267:42::3;::::0;;::::3;;::::0;;::::3;-1:-1:-1::0;;18774:267:42::3;::::0;::::3;::::0;;;::::3;::::0;;::::3;::::0;::::3;:::i;:::-;;;18770:1302;;;;:::i;:::-;;;::::0;::::3;;;;;:::i;:::-;;;;;;;;19824:9;19817:17;;-1:-1:-1::0;;;19817:17:42::3;;;;;;;;:::i;18770:1302::-;;;20037:24;;-1:-1:-1::0;;;20037:24:42::3;;;;;;;;;;;18770:1302;19161:14;19156:85;;19202:24;;-1:-1:-1::0;;;19202:24:42::3;;;;;;;;;;;19156:85;19409:11;:22:::0;;;19577:20:::3;::::0;;;:11:::3;:20;::::0;;;;:47;;-1:-1:-1;;;;;;19577:47:42::3;19608:15;-1:-1:-1::0;;;;;19577:47:42::3;;::::0;;19409:22;;19644:52:::3;::::0;19656:7;;19644:52:::3;::::0;;;::::3;19042:665;18770:1302;17846:2232;;;17580:2498:::0;;;;;;:::o;6380:2438:43:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;41750:17:42::2;::::0;-1:-1:-1;;;;;41750:17:42::2;41736:10;:31;41732:93;;41790:24;::::0;-1:-1:-1;;;41790:24:42;;41803:10:::2;41790:24;::::0;::::2;6006:51:80::0;5979:18;;41790:24:42::2;5860:203:80::0;41732:93:42::2;6665:11:43::3;;6654:7;:22;6650:95;;6722:11;::::0;6699:35:::3;::::0;-1:-1:-1;;;6699:35:43;;::::3;::::0;6713:7;;6699:35:::3;;12764:25:80::0;;;12820:2;12805:18;;12798:34;12752:2;12737:18;;12590:248;6650:95:43::3;6836:17;6868:87;6903:21;;6926:7;6935:8;6945:9;6868:34;:87::i;:::-;6836:119:::0;-1:-1:-1;7226:22:43::3;7251:39;4368:77:42;6836:119:43::0;7251:39:::3;:::i;:::-;7407:22;::::0;:48:::3;::::0;-1:-1:-1;;;7407:48:43;;17424:10:80;17412:23;;7407:48:43::3;::::0;::::3;17394:42:80::0;7226:64:43;;-1:-1:-1;7374:30:43::3;::::0;-1:-1:-1;;;;;7407:22:43;;::::3;::::0;:37:::3;::::0;17367:18:80;;7407:48:43::3;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7374:81;;7524:16;-1:-1:-1::0;;;;;7524:28:43::3;;:258;;;;;;;;7567:13;7581:1;7567:16;;;;;;;:::i;:::-;;;;;7524:258;;;;7585:13;7599:1;7585:16;;;;;;;:::i;:::-;;;;;7524:258:::0;;::::3;::::0;;;;;;;7618:16;;::::3;;7524:258:::0;;::::3;::::0;;;;;;;;;7618:13;7650:1:::3;7636:16;;;;7524:258;;::::0;::::3;;;;;;;;;;;;7656:13;7670:1;7656:16;;;;;;;:::i;:::-;;;;;7524:258;;;;7674:13;7688:1;7674:16;;;;;;;:::i;:::-;;;;;7524:258:::0;;;;::::3;::::0;;;;::::3;::::0;;;;7707:13;7721:1:::3;7707:16;;;;7524:258;;;;7725:13;7739:1;7725:16;;;;;;;:::i;:::-;;;;;7524:258;;::::0;::::3;;;;;;;;7757:14;7524:258;;::::0;::::3;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;7524:258:43::3;::::0;;::::3;;::::0;;::::3;-1:-1:-1::0;;7524:258:43::3;::::0;::::3;::::0;;;::::3;::::0;;::::3;::::0;::::3;:::i;:::-;;;7520:1292;;;;:::i;:::-;7902:14;7897:85;;7943:24;;-1:-1:-1::0;;;7943:24:43::3;;;;;;;;;;;7897:85;8150:11;:22:::0;;;8318:20:::3;::::0;;;:11:::3;:20;::::0;;;;:47;;-1:-1:-1;;;;;;8318:47:43::3;8349:15;-1:-1:-1::0;;;;;8318:47:43::3;;::::0;;8150:22;-1:-1:-1;8385:51:43::3;::::0;8397:7;;8385:51:::3;::::0;;;::::3;7783:664;6640:2178;;;6380:2438:::0;;;;;;:::o;3800:152::-;4871:13:22;;3886:1:43;;4871:13:22;;;;;4870:14;:40;;;;-1:-1:-1;4888:12:22;;:22;;;;:12;;:22;4870:40;4862:99;;;;-1:-1:-1;;;4862:99:22;;;;;;;:::i;:::-;4971:12;:22;;3899::43::1;:46:::0;;-1:-1:-1;;;;;;3899:46:43::1;-1:-1:-1::0;;;;;3899:46:43;::::1;;::::0;;-1:-1:-1;;4971:22:22;;;;-1:-1:-1;;5003:20:22;;;;;;5044:21;;;;5080:20;;10228:36:80;;;5080:20:22;;10216:2:80;10201:18;5080:20:22;;;;;;;3800:152:43;;:::o;34738:423:42:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;1334:13:18::2;:11;:13::i;:::-;34954:23:42::3;::::0;;-1:-1:-1;;;;;34987:34:42;;::::3;-1:-1:-1::0;;;;;;34987:34:42;::::3;::::0;::::3;::::0;;;34954:23:::3;::::0;;;35036:118:::3;::::0;11363:685:43;11591:12;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;11663:4:43::2;11657:11;11719:1;11708:9;11704:17;11790:15;11760:28;11747:11;11734:72;11838:33:::0;;::::2;11884:28:::0;;;11949:2:::2;11932:20:::0;;::::2;11925:38:::0;;;;-1:-1:-1;;12011:2:43::2;12007:24:::0;;::::2;11984:48:::0;;;11363:685;-1:-1:-1;;11363:685:43:o;40699:508:42:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;40987:22:42::2;41004:4;40987:16;:22::i;:::-;41075:17;::::0;41181:9:::2;::::0;41075:125:::2;::::0;-1:-1:-1;;;41075:125:42;;-1:-1:-1;;;;;41075:17:42;;::::2;::::0;:29:::2;::::0;:125:::2;::::0;41118:4;;41124:13;;41139:10;;41151:21;;41174:5;;-1:-1:-1;;;41181:9:42;::::2;;;::::0;41075:125:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;3317:197:23::0;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;3400:36:::1;3418:17;3400;:36::i;:::-;3487:12;::::0;;3497:1:::1;3487:12:::0;;;::::1;::::0;::::1;::::0;;;3446:61:::1;::::0;3468:17;;3487:12;3446:21:::1;:61::i;:::-;3317:197:::0;:::o;13806:1014:42:-;4871:13:22;;14060:1:42;;4871:13:22;;;;;4870:14;:40;;;;-1:-1:-1;4888:12:22;;:22;;;;:12;;:22;4870:40;4862:99;;;;-1:-1:-1;;;4862:99:22;;;;;;;:::i;:::-;4971:12;:22;;-1:-1:-1;;5003:20:22;4971:22;;;5003:20;4971:22;5003:20;;;14148:16:42::1;:14;:16::i;:::-;14180:48;14217:10;14180:36;:48::i;:::-;14175:119;;14251:32;::::0;-1:-1:-1;;;14251:32:42;;10258:4:80;10246:17;;14251:32:42::1;::::0;::::1;10228:36:80::0;10201:18;;14251:32:42::1;10086:184:80::0;14175:119:42::1;14361:9;:22:::0;;-1:-1:-1;;;;14361:22:42::1;-1:-1:-1::0;;;14361:22:42::1;::::0;::::1;;;::::0;;14413:7:::1;14393:17;:27:::0;14430:11:::1;:25:::0;;;14465:23:::1;:50:::0;;-1:-1:-1;;;;;;14465:50:42;;::::1;-1:-1:-1::0;;;;;14465:50:42;;::::1;::::0;;;::::1;::::0;;;14525:23:::1;:47:::0;;;::::1;::::0;;::::1;;::::0;;14582:17:::1;:38:::0;;;::::1;::::0;;::::1;;::::0;;1513:6:18;;14630:17:42::1;:27:::0;;1513:6:18;;;;14630:27:42;::::1;;::::0;;14717:18:::1;:16;:18::i;:::-;14751:62;::::0;;18673:4:80;18661:17;;18643:36;;18710:2;18695:18;;18688:34;;;14751:62:42::1;::::0;18616:18:80;14751:62:42::1;;;;;;;5060:5:22::0;5044:21;;-1:-1:-1;;5044:21:22;;;5080:20;;10258:4:80;10246:17;;10228:36;;5080:20:22;;10216:2:80;10201:18;5080:20:22;;;;;;;13806:1014:42;;;;;;:::o;9156:228:43:-;9316:7;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;-1:-1:-1::0;9354:22:43::2;::::0;-1:-1:-1;;;;;9354:22:43::2;1144:1:77;9156:228:43::0;:::o;32299:567:42:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;32478:11:42::2;;32470:4;:19:::0;32466:394:::2;;-1:-1:-1::0;;32512:30:42::2;::::0;;::::2;::::0;::::2;::::0;;32521:11:::2;::::0;32512:30;;-1:-1:-1;32512:30:42::2;::::0;::::2;::::0;32537:4:::2;32512:30:::0;;;;;;;;32299:567::o;32466:394::-:2;32573:21;32597:17:::0;;;:11:::2;:17;::::0;;;;;-1:-1:-1;;;;;32597:17:42::2;::::0;32633:18;;;32629:78:::2;;-1:-1:-1::0;;;;;;;;;;;;;;;;;;;;;;;;;;7218:25:42;;;;;;;;;;;;;;;;;;;;32678:14:::2;32671:21:::0;32299:567;-1:-1:-1;;;32299:567:42:o;32629:78::-:2;32772:17;::::0;32721:12:::2;::::0;32738:31:::2;-1:-1:-1::0;;;;;32738:31:42;::::2;:15;:31;:::i;:::-;32811:38;::::0;;::::2;::::0;::::2;::::0;;;;;-1:-1:-1;;;;;32811:38:42;;::::2;;::::0;::::2;::::0;32738:51;-1:-1:-1;32736:54:42::2;32811:38:::0;;;;-1:-1:-1;32811:38:42;-1:-1:-1;32466:394:42::2;32299:567:::0;;;:::o;37747:189::-;37882:7;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;-1:-1:-1::0;37912:17:42::2;::::0;37747:189;:::o;3763:222:23:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;3880:36:::1;3898:17;3880;:36::i;:::-;3926:52;3948:17;3967:4;3973;3926:21;:52::i;:::-;3763:222:::0;;:::o;35454:227:42:-;35612:7;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;-1:-1:-1::0;35650:23:42::2;::::0;-1:-1:-1;;;;;35650:23:42::2;35454:227:::0;:::o;3006:131:23:-;3084:7;2324:4;-1:-1:-1;;;;;2333:6:23;2316:23;;2308:92;;;;-1:-1:-1;;;2308:92:23;;19165:2:80;2308:92:23;;;19147:21:80;19204:2;19184:18;;;19177:30;19243:34;19223:18;;;19216:62;19314:26;19294:18;;;19287:54;19358:19;;2308:92:23;18963:420:80;2308:92:23;-1:-1:-1;;;;;;;;;;;;3006:131:23;:::o;36071:416:42:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;1334:13:18::2;:11;:13::i;:::-;36283:23:42::3;::::0;;-1:-1:-1;;;;;36316:34:42;;::::3;-1:-1:-1::0;;;;;;36316:34:42;::::3;::::0;::::3;::::0;;;36283:23:::3;::::0;;36396:36:::3;36365:115;::::0;4649:109:44;1334:13:18;:11;:13::i;:::-;4726:25:44::1;;-1:-1:-1::0;;;4726:25:44::1;;;;;;;;;;;2010:206:17::0;1202:13;;929:10:25;;-1:-1:-1;;;;;1202:13:17;2103:24;;2095:78;;;;-1:-1:-1;;;2095:78:17;;19590:2:80;2095:78:17;;;19572:21:80;19629:2;19609:18;;;19602:30;19668:34;19648:18;;;19641:62;-1:-1:-1;;;19719:18:80;;;19712:39;19768:19;;2095:78:17;19388:405:80;2095:78:17;2183:26;2202:6;2183:18;:26::i;31089:465:42:-;31366:12;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;31390:24:42::2;31446:7;31455:8;31465:11;;31478:13;;31493;;31429:78;;;;;;;;;;;;;;;:::i;:::-;;::::0;;-1:-1:-1;;31429:78:42;;::::2;::::0;;;;;;31525:22;;31429:78:::2;31525:22:::0;;::::2;::::0;;31089:465;-1:-1:-1;;;;;;;;;;31089:465:42:o;29135:413::-;29370:12;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;29394:24:42::2;29450:10;29462:7;29471:8;29481:19;;29433:68;;;;;;;;;;;;:::i;:::-;;::::0;;-1:-1:-1;;29433:68:42;;::::2;::::0;;;;;;29519:22;;29433:68:::2;29519:22:::0;;::::2;::::0;;29135:413;-1:-1:-1;;;;;;;29135:413:42:o;38714:119::-;38793:5;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;-1:-1:-1::0;38817:9:42::2;::::0;-1:-1:-1;;;38817:9:42;::::2;;;::::0;38714:119::o;34179:231::-;34341:7;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;-1:-1:-1::0;34379:23:42::2;::::0;-1:-1:-1;;;;;34379:23:42::2;34179:231:::0;:::o;39480:384::-;39646:7;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;1334:13:18::2;:11;:13::i;:::-;39691:17:42::3;::::0;;-1:-1:-1;;;;;39718:39:42;;::::3;-1:-1:-1::0;;;;;;39718:39:42;::::3;::::0;::::3;::::0;;;39772:57:::3;::::0;39691:17;::::3;::::0;39718:39;39691:17;;39772:57:::3;::::0;39669:19:::3;::::0;39772:57:::3;39846:11:::0;39480:384;-1:-1:-1;;39480:384:42:o;9704:418:43:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;1334:13:18::2;:11;:13::i;:::-;9918:22:43::3;::::0;;-1:-1:-1;;;;;9950:33:43;;::::3;-1:-1:-1::0;;;;;;9950:33:43;::::3;::::0;::::3;::::0;;;9918:22:::3;::::0;;10029:38:::3;9998:117;::::0;22820:1590:42;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;41750:17:42::2;::::0;-1:-1:-1;;;;;41750:17:42::2;41736:10;:31;41732:93;;41790:24;::::0;-1:-1:-1;;;41790:24:42;;41803:10:::2;41790:24;::::0;::::2;6006:51:80::0;5979:18;;41790:24:42::2;5860:203:80::0;41732:93:42::2;23154:11:::3;;23143:7;:22;23139:95;;23211:11;::::0;23188:35:::3;::::0;-1:-1:-1;;;23188:35:42;;::::3;::::0;23202:7;;23188:35:::3;;12764:25:80::0;;;12820:2;12805:18;;12798:34;12752:2;12737:18;;12590:248;23139:95:42::3;23322:42:::0;;::::3;;::::0;:88:::3;;-1:-1:-1::0;23368:42:42;;::::3;;23322:88;23305:172;;;23442:24;;-1:-1:-1::0;;;23442:24:42::3;;;;;;;;;;;23305:172;23564:17;23584:116;23630:7;23639:8;23649:11;;23662:13;;23677;;23584:32;:116::i;:::-;23564:136:::0;-1:-1:-1;23971:24:42::3;23998:39;4368:77;23564:136:::0;23998:39:::3;:::i;:::-;24152:23;::::0;:58:::3;::::0;-1:-1:-1;;;24152:58:42;;::::3;::::0;::::3;4125:25:80::0;;;23971:66:42;;-1:-1:-1;24121:28:42::3;::::0;-1:-1:-1;;;;;24152:23:42;;::::3;::::0;:38:::3;::::0;4098:18:80;;24152:58:42::3;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;24121:89;;24316:87;24338:14;24354:11;24367:16;24385:7;24394:8;24316:21;:87::i;:::-;23129:1281;;;22820:1590:::0;;;;;;;;;:::o;38168:402::-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;1334:13:18::2;:11;:13::i;:::-;38330::42::3;38347:1;38330:18:::0;38326:86:::3;;38364:37;::::0;-1:-1:-1;;;38364:37:42;;21716:2:80;38364:37:42::3;::::0;::::3;21698:21:80::0;21755:2;21735:18;;;21728:30;21794:29;21774:18;;;21767:57;21841:18;;38364:37:42::3;21514:351:80::0;38326:86:42::3;38441:17;::::0;;38468:33;;;;38517:46:::3;::::0;38488:13;;38441:17;;38517:46:::3;::::0;38421:17:::3;::::0;38517:46:::3;38316:254;38168:402:::0;:::o;31682:121::-;31759:7;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;-1:-1:-1::0;31785:11:42::2;::::0;31682:121;:::o;39054:133::-;39137:7;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;-1:-1:-1::0;39163:17:42::2;::::0;-1:-1:-1;;;;;39163:17:42::2;39054:133:::0;:::o;36670:205::-;36812:7;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;-1:-1:-1::0;36850:17:42::2;::::0;-1:-1:-1;;;;;36850:17:42::2;36670:205:::0;:::o;33309:638::-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;33461:11:42::2;::::0;33449:56;;33488:7:::2;33449:56;33580:21;33604:17:::0;;;:11:::2;:17;::::0;;;;;-1:-1:-1;;;;;33604:17:42::2;::::0;33704:18;;;33700:73:::2;;33745:17;;-1:-1:-1::0;;;33745:17:42::2;;;;;;;;;;;33700:73;33877:17;::::0;33843:31:::2;-1:-1:-1::0;;;;;33843:31:42;::::2;:15;:31;:::i;:::-;:51;33839:102;;;33917:13;;-1:-1:-1::0;;;33917:13:42::2;;;;;;;;;;;1415:178:17::0;1334:13:18;:11;:13::i;:::-;1504::17::1;:24:::0;;-1:-1:-1;;;;;1504:24:17;::::1;-1:-1:-1::0;;;;;;1504:24:17;;::::1;::::0;::::1;::::0;;;1568:7:::1;1513:6:18::0;;-1:-1:-1;;;;;1513:6:18;;1441:85;1568:7:17::1;-1:-1:-1::0;;;;;1543:43:17::1;;;;;;;;;;;1415:178:::0;:::o;1563:151:20:-;-1:-1:-1;;;;;;;;;;;1642:65:20;-1:-1:-1;;;;;1642:65:20;;1563:151::o;1599:130:18:-;1513:6;;-1:-1:-1;;;;;1513:6:18;929:10:25;1662:23:18;1654:68;;;;-1:-1:-1;;;1654:68:18;;22072:2:80;1654:68:18;;;22054:21:80;;;22091:18;;;22084:30;22150:34;22130:18;;;22123:62;22202:18;;1654:68:18;21870:356:80;1654:68:18;1599:130::o;4067:204:44:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1334:13:18::1;:11;:13::i;2938:974:20:-:0;951:66;3384:59;;;3380:526;;;3459:37;3478:17;3459:18;:37::i;:::-;2938:974;;;:::o;3380:526::-;3560:17;-1:-1:-1;;;;;3531:61:20;;:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3531:63:20;;;;;;;;-1:-1:-1;;3531:63:20;;;;;;;;;;;;:::i;:::-;;;3527:302;;3758:56;;-1:-1:-1;;;3758:56:20;;22622:2:80;3758:56:20;;;22604:21:80;22661:2;22641:18;;;22634:30;22700:34;22680:18;;;22673:62;-1:-1:-1;;;22751:18:80;;;22744:44;22805:19;;3758:56:20;22420:410:80;3527:302:20;-1:-1:-1;;;;;;;;;;;3644:28:20;;3636:82;;;;-1:-1:-1;;;3636:82:20;;23037:2:80;3636:82:20;;;23019:21:80;23076:2;23056:18;;;23049:30;23115:34;23095:18;;;23088:62;-1:-1:-1;;;23166:18:80;;;23159:39;23215:19;;3636:82:20;22835:405:80;3636:82:20;3595:138;3842:53;3860:17;3879:4;3885:9;3842:17;:53::i;15154:97:42:-;5363:13:22;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:22;;;;;;;:::i;:::-;15224:20:42::1;:18;:20::i;434:207:78:-:0;492:19;540:2;569;588:21;;;;-1:-1:-1;588:21:78;;;:46;;;626:8;613:21;;:9;:21;;;;588:46;581:53;434:207;-1:-1:-1;;;;434:207:78:o;794:90:77:-;5363:13:22;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:22;;;;;;;:::i;:::-;858:12:77::1;:19:::0;;-1:-1:-1;;858:19:77::1;873:4;858:19;::::0;;794:90::o;1777:153:17:-;1866:13;1859:20;;-1:-1:-1;;;;;;1859:20:17;;;1889:34;1914:8;1889:24;:34::i;26242:1763:42:-;-1:-1:-1;;;;;1898:6:23;1881:23;1889:4;1881:23;1873:80;;;;-1:-1:-1;;;1873:80:23;;;;;;;:::i;:::-;1995:6;-1:-1:-1;;;;;1971:30:23;:20;:18;:20::i;:::-;-1:-1:-1;;;;;1971:30:23;;1963:87;;;;-1:-1:-1;;;1963:87:23;;;;;;;:::i;:::-;1059:12:77::1;::::0;::::1;;1054:81;;1094:30;;-1:-1:-1::0;;;1094:30:77::1;;;;;;;;;;;1054:81;41750:17:42::2;::::0;-1:-1:-1;;;;;41750:17:42::2;41736:10;:31;41732:93;;41790:24;::::0;-1:-1:-1;;;41790:24:42;;41803:10:::2;41790:24;::::0;::::2;6006:51:80::0;5979:18;;41790:24:42::2;5860:203:80::0;41732:93:42::2;26566:20:::3;:55;;;;;;;;26590:11;26602:1;26590:14;;;;;;;:::i;:::-;;;;;26566:55;;;;26606:11;26618:1;26606:14;;;;;;;:::i;:::-;;;;;26566:55:::0;;26631:106:::3;::::0;;;;;;;26671:14;;::::3;;26631:106:::0;;::::3;::::0;;;26566:55;;-1:-1:-1;;;26631:106:42;;;;;;26671:11;26699:1:::3;26687:14;;;;26631:106;;::::0;::::3;;;;;;;;;;;;26705:11;26717:1;26705:14;;;;;;;:::i;:::-;;;;;26631:106;;;;26721:11;26733:1;26721:14;;;;;;;:::i;:::-;;;;;26631:106:::0;;;;26747:56:::3;::::0;;;;::::3;::::0;;;26631:106;;-1:-1:-1;26747:21:42::3;::::0;:56;26772:11;26784:1:::3;26772:14;;;;26747:56;;;;26788:11;26800:1;26788:14;;;;;;;:::i;:::-;;;;;26747:56;;::::0;::::3;;26813:28;:42;;;;;;;;26845:9;26813:42;;::::0;::::3;;26920:14;-1:-1:-1::0;;;;;26920:26:42::3;;26947:2;26951;26955:3;26960:10;26920:51;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1::0;26920:51:42::3;::::0;;::::3;;::::0;;::::3;-1:-1:-1::0;;26920:51:42::3;::::0;::::3;::::0;;;::::3;::::0;;::::3;::::0;::::3;:::i;:::-;;;26916:1083;;;;:::i;:::-;27091:14;27086:85;;27132:24;;-1:-1:-1::0;;;27132:24:42::3;;;;;;;;;;;27086:85;27339:11;:22:::0;;;27507:20:::3;::::0;;;:11:::3;:20;::::0;;;;:47;;-1:-1:-1;;;;;;27507:47:42::3;27538:15;-1:-1:-1::0;;;;;27507:47:42::3;;::::0;;27339:22;27595:17:::3;27574:49;::::0;27586:7;;27574:49:::3;::::0;;;::::3;26972:662;26500:1505;;;;26242:1763:::0;;;;;:::o;1805:281:20:-;-1:-1:-1;;;;;1476:19:24;;;1878:106:20;;;;-1:-1:-1;;;1878:106:20;;23859:2:80;1878:106:20;;;23841:21:80;23898:2;23878:18;;;23871:30;23937:34;23917:18;;;23910:62;-1:-1:-1;;;23988:18:80;;;23981:43;24041:19;;1878:106:20;23657:409:80;1878:106:20;-1:-1:-1;;;;;;;;;;;1994:85:20;;-1:-1:-1;;;;;;1994:85:20;-1:-1:-1;;;;;1994:85:20;;;;;;;;;;1805:281::o;2478:288::-;2616:29;2627:17;2616:10;:29::i;:::-;2673:1;2659:4;:11;:15;:28;;;;2678:9;2659:28;2655:105;;;2703:46;2725:17;2744:4;2703:21;:46::i;:::-;;2478:288;;;:::o;3048:131:44:-;5363:13:22;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:22;;;;;;;:::i;:::-;3122:16:44::1;:14;:16::i;:::-;3148:24;:22;:24::i;2673:187:18:-:0;2765:6;;;-1:-1:-1;;;;;2781:17:18;;;-1:-1:-1;;;;;;2781:17:18;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;2192:152:20:-;2258:37;2277:17;2258:18;:37::i;:::-;2310:27;;-1:-1:-1;;;;;2310:27:20;;;;;;;;2192:152;:::o;7088:455::-;7171:12;-1:-1:-1;;;;;1476:19:24;;;7195:88:20;;;;-1:-1:-1;;;7195:88:20;;24273:2:80;7195:88:20;;;24255:21:80;24312:2;24292:18;;;24285:30;24351:34;24331:18;;;24324:62;-1:-1:-1;;;24402:18:80;;;24395:36;24448:19;;7195:88:20;24071:402:80;7195:88:20;7354:12;7368:23;7395:6;-1:-1:-1;;;;;7395:19:20;7415:4;7395:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7353:67;;;;7437:99;7473:7;7482:10;7437:99;;;;;;;;;;;;;;;;;:35;:99::i;:::-;7430:106;;;;7088:455;;;;;:::o;1003:95:18:-;5363:13:22;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:22;;;;;;;:::i;:::-;1065:26:18::1;:24;:26::i;1042:67:23:-:0;5363:13:22;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:22;;;;;;;:::i;7438:295:24:-;7584:12;7612:7;7608:119;;;-1:-1:-1;7642:10:24;7635:17;;7608:119;7683:33;7691:10;7703:12;7683:7;:33::i;1104:111:18:-;5363:13:22;;;;;;;5355:69;;;;-1:-1:-1;;;5355:69:22;;;;;;;:::i;:::-;1176:32:18::1;929:10:25::0;1176:18:18::1;:32::i;7739:540:24:-:0;7898:17;;:21;7894:379;;8126:10;8120:17;8182:15;8169:10;8165:2;8161:19;8154:44;14:151:80;-1:-1:-1;;;;;109:31:80;;99:42;;89:70;;155:1;152;145:12;170:295;257:6;310:2;298:9;289:7;285:23;281:32;278:52;;;326:1;323;316:12;278:52;365:9;352:23;384:51;429:5;384:51;:::i;470:160::-;564:6;597:3;585:16;;582:25;-1:-1:-1;579:45:80;;;620:1;617;610:12;635:163;702:20;;762:10;751:22;;741:33;;731:61;;788:1;785;778:12;803:367;866:8;876:6;930:3;923:4;915:6;911:17;907:27;897:55;;948:1;945;938:12;897:55;-1:-1:-1;971:20:80;;1014:18;1003:30;;1000:50;;;1046:1;1043;1036:12;1000:50;1083:4;1075:6;1071:17;1059:29;;1143:3;1136:4;1126:6;1123:1;1119:14;1111:6;1107:27;1103:38;1100:47;1097:67;;;1160:1;1157;1150:12;1097:67;803:367;;;;;:::o;1175:773::-;1321:6;1329;1337;1345;1353;1361;1414:3;1402:9;1393:7;1389:23;1385:33;1382:53;;;1431:1;1428;1421:12;1382:53;1454;1499:7;1488:9;1454:53;:::i;:::-;1444:63;;1554:3;1543:9;1539:19;1526:33;1516:43;;1578:38;1611:3;1600:9;1596:19;1578:38;:::i;:::-;1568:48;;1667:3;1656:9;1652:19;1639:33;1695:18;1687:6;1684:30;1681:50;;;1727:1;1724;1717:12;1681:50;1766:70;1828:7;1819:6;1808:9;1804:22;1766:70;:::i;:::-;1175:773;;;;-1:-1:-1;1175:773:80;;;;;1937:3;1922:19;;;1909:33;;1175:773;-1:-1:-1;;;;1175:773:80:o;1953:347::-;2004:8;2014:6;2068:3;2061:4;2053:6;2049:17;2045:27;2035:55;;2086:1;2083;2076:12;2035:55;-1:-1:-1;2109:20:80;;2152:18;2141:30;;2138:50;;;2184:1;2181;2174:12;2138:50;2221:4;2213:6;2209:17;2197:29;;2273:3;2266:4;2257:6;2249;2245:19;2241:30;2238:39;2235:59;;;2290:1;2287;2280:12;2305:745;2435:6;2443;2451;2459;2467;2475;2528:3;2516:9;2507:7;2503:23;2499:33;2496:53;;;2545:1;2542;2535:12;2496:53;2568;2613:7;2602:9;2568:53;:::i;:::-;2558:63;;2640:38;2673:3;2662:9;2658:19;2640:38;:::i;:::-;2630:48;;2729:3;2718:9;2714:19;2701:33;2757:18;2749:6;2746:30;2743:50;;;2789:1;2786;2779:12;2743:50;2828:58;2878:7;2869:6;2858:9;2854:22;2828:58;:::i;:::-;2305:745;;;;-1:-1:-1;2905:8:80;2987:3;2972:19;;2959:33;;3039:3;3024:19;;;3011:33;;-1:-1:-1;2305:745:80;-1:-1:-1;;;;2305:745:80:o;3356:618::-;3452:6;3460;3468;3476;3484;3537:3;3525:9;3516:7;3512:23;3508:33;3505:53;;;3554:1;3551;3544:12;3505:53;3594:9;3581:23;3627:18;3619:6;3616:30;3613:50;;;3659:1;3656;3649:12;3613:50;3698:58;3748:7;3739:6;3728:9;3724:22;3698:58;:::i;:::-;3775:8;;-1:-1:-1;3672:84:80;-1:-1:-1;;3857:2:80;3842:18;;3829:32;;-1:-1:-1;3908:2:80;3893:18;;3880:32;;-1:-1:-1;3931:37:80;3964:2;3949:18;;3931:37;:::i;:::-;3921:47;;3356:618;;;;;;;;:::o;4161:509::-;4281:6;4289;4297;4305;4313;4366:3;4354:9;4345:7;4341:23;4337:33;4334:53;;;4383:1;4380;4373:12;4334:53;4419:9;4406:23;4396:33;;4476:2;4465:9;4461:18;4448:32;4438:42;;4527:2;4516:9;4512:18;4499:32;4489:42;;4578:2;4567:9;4563:18;4550:32;4540:42;;4601:63;4656:7;4650:3;4639:9;4635:19;4601:63;:::i;4947:908::-;5126:6;5134;5142;5150;5158;5211:3;5199:9;5190:7;5186:23;5182:33;5179:53;;;5228:1;5225;5218:12;5179:53;5267:9;5254:23;5317:4;5310:5;5306:16;5299:5;5296:27;5286:55;;5337:1;5334;5327:12;5286:55;5360:5;-1:-1:-1;5412:2:80;5397:18;;5384:32;;-1:-1:-1;5468:2:80;5453:18;;5440:32;5481:53;5440:32;5481:53;:::i;:::-;5553:7;-1:-1:-1;5612:2:80;5597:18;;5584:32;5625:53;5584:32;5625:53;:::i;:::-;5697:7;-1:-1:-1;5756:3:80;5741:19;;5728:33;5770:53;5728:33;5770:53;:::i;:::-;5842:7;5832:17;;;4947:908;;;;;;;;:::o;6068:180::-;6127:6;6180:2;6168:9;6159:7;6155:23;6151:32;6148:52;;;6196:1;6193;6186:12;6148:52;-1:-1:-1;6219:23:80;;6068:180;-1:-1:-1;6068:180:80:o;6861:127::-;6922:10;6917:3;6913:20;6910:1;6903:31;6953:4;6950:1;6943:15;6977:4;6974:1;6967:15;6993:249;7103:2;7084:13;;-1:-1:-1;;7080:27:80;7068:40;;7138:18;7123:34;;7159:22;;;7120:62;7117:88;;;7185:18;;:::i;:::-;7221:2;7214:22;-1:-1:-1;;6993:249:80:o;7247:953::-;7324:6;7332;7385:2;7373:9;7364:7;7360:23;7356:32;7353:52;;;7401:1;7398;7391:12;7353:52;7440:9;7427:23;7459:51;7504:5;7459:51;:::i;:::-;7529:5;-1:-1:-1;7553:2:80;7591:18;;;7578:32;7629:18;7659:14;;;7656:34;;;7686:1;7683;7676:12;7656:34;7724:6;7713:9;7709:22;7699:32;;7769:7;7762:4;7758:2;7754:13;7750:27;7740:55;;7791:1;7788;7781:12;7740:55;7827:2;7814:16;7849:2;7845;7842:10;7839:36;;;7855:18;;:::i;:::-;7904:2;7898:9;;-1:-1:-1;7916:65:80;7971:2;7952:13;;-1:-1:-1;;7948:27:80;7944:36;;7898:9;7916:65;:::i;:::-;8005:2;7997:6;7990:18;8045:7;8040:2;8035;8031;8027:11;8023:20;8020:33;8017:53;;;8066:1;8063;8056:12;8017:53;8122:2;8117;8113;8109:11;8104:2;8096:6;8092:15;8079:46;8167:1;8162:2;8157;8149:6;8145:15;8141:24;8134:35;;8188:6;8178:16;;;;;7247:953;;;;;:::o;8205:1225::-;8380:6;8388;8396;8404;8412;8420;8428;8436;8489:3;8477:9;8468:7;8464:23;8460:33;8457:53;;;8506:1;8503;8496:12;8457:53;8542:9;8529:23;8519:33;;8599:2;8588:9;8584:18;8571:32;8561:42;;8654:2;8643:9;8639:18;8626:32;8677:18;8718:2;8710:6;8707:14;8704:34;;;8734:1;8731;8724:12;8704:34;8773:70;8835:7;8826:6;8815:9;8811:22;8773:70;:::i;:::-;8862:8;;-1:-1:-1;8747:96:80;-1:-1:-1;8950:2:80;8935:18;;8922:32;;-1:-1:-1;8966:16:80;;;8963:36;;;8995:1;8992;8985:12;8963:36;9034:72;9098:7;9087:8;9076:9;9072:24;9034:72;:::i;:::-;9125:8;;-1:-1:-1;9008:98:80;-1:-1:-1;9213:3:80;9198:19;;9185:33;;-1:-1:-1;9230:16:80;;;9227:36;;;9259:1;9256;9249:12;9227:36;;9298:72;9362:7;9351:8;9340:9;9336:24;9298:72;:::i;:::-;8205:1225;;;;-1:-1:-1;8205:1225:80;;-1:-1:-1;8205:1225:80;;;;;;9389:8;-1:-1:-1;;;8205:1225:80:o;9435:646::-;9547:6;9555;9563;9571;9579;9632:3;9620:9;9611:7;9607:23;9603:33;9600:53;;;9649:1;9646;9639:12;9600:53;9672:28;9690:9;9672:28;:::i;:::-;9662:38;;9747:2;9736:9;9732:18;9719:32;9709:42;;9798:2;9787:9;9783:18;9770:32;9760:42;;9853:2;9842:9;9838:18;9825:32;9880:18;9872:6;9869:30;9866:50;;;9912:1;9909;9902:12;9866:50;9951:70;10013:7;10004:6;9993:9;9989:22;9951:70;:::i;:::-;9435:646;;;;-1:-1:-1;9435:646:80;;-1:-1:-1;10040:8:80;;9925:96;9435:646;-1:-1:-1;;;9435:646:80:o;10275:1352::-;10484:6;10492;10500;10508;10516;10524;10532;10540;10548;10601:3;10589:9;10580:7;10576:23;10572:33;10569:53;;;10618:1;10615;10608:12;10569:53;10641;10686:7;10675:9;10641:53;:::i;:::-;10631:63;;10741:3;10730:9;10726:19;10713:33;10703:43;;10797:3;10786:9;10782:19;10769:33;10821:18;10862:2;10854:6;10851:14;10848:34;;;10878:1;10875;10868:12;10848:34;10917:70;10979:7;10970:6;10959:9;10955:22;10917:70;:::i;:::-;11006:8;;-1:-1:-1;10891:96:80;-1:-1:-1;11094:3:80;11079:19;;11066:33;;-1:-1:-1;11111:16:80;;;11108:36;;;11140:1;11137;11130:12;11108:36;11179:72;11243:7;11232:8;11221:9;11217:24;11179:72;:::i;:::-;11270:8;;-1:-1:-1;11153:98:80;-1:-1:-1;11358:3:80;11343:19;;11330:33;;-1:-1:-1;11375:16:80;;;11372:36;;;11404:1;11401;11394:12;11372:36;;11443:72;11507:7;11496:8;11485:9;11481:24;11443:72;:::i;:::-;10275:1352;;;;-1:-1:-1;10275:1352:80;;;;;;;;11534:8;11616:3;11601:19;11588:33;;10275:1352;-1:-1:-1;;;;10275:1352:80:o;11632:408::-;11834:2;11816:21;;;11873:2;11853:18;;;11846:30;11912:34;11907:2;11892:18;;11885:62;-1:-1:-1;;;11978:2:80;11963:18;;11956:42;12030:3;12015:19;;11632:408::o;12045:::-;12247:2;12229:21;;;12286:2;12266:18;;;12259:30;12325:34;12320:2;12305:18;;12298:62;-1:-1:-1;;;12391:2:80;12376:18;;12369:42;12443:3;12428:19;;12045:408::o;12843:209::-;12875:1;12901;12891:132;;12945:10;12940:3;12936:20;12933:1;12926:31;12980:4;12977:1;12970:15;13008:4;13005:1;12998:15;12891:132;-1:-1:-1;13037:9:80;;12843:209::o;13057:294::-;13150:6;13203:2;13191:9;13182:7;13178:23;13174:32;13171:52;;;13219:1;13216;13209:12;13171:52;13251:9;13245:16;13270:51;13315:5;13270:51;:::i;13356:127::-;13417:10;13412:3;13408:20;13405:1;13398:31;13448:4;13445:1;13438:15;13472:4;13469:1;13462:15;13488:326;13581:5;13604:1;13614:194;13628:4;13625:1;13622:11;13614:194;;;13687:13;;13675:26;;13724:4;13748:12;;;;13783:15;;;;13648:1;13641:9;13614:194;;13819:1627;14267:3;14252:19;;14280:43;14256:9;14305:6;14280:43;:::i;:::-;14342:2;14379;14368:9;14364:18;14424:6;14448:1;14458:586;14522:4;14555:2;14552:1;14549:9;14539:30;;14562:5;;;14539:30;14592:13;;14631:3;14714:1;14728:234;14744:2;14739:3;14736:11;14728:234;;;14815:15;;14801:30;;14858:4;14931:17;;;;14888:14;;;;14766:1;14757:11;14728:234;;;-1:-1:-1;;;14982:12:80;;;;-1:-1:-1;15029:4:80;15017:17;;;;;14485:1;14478:9;14458:586;;;14462:3;;;;15053:53;15101:3;15090:9;15086:19;15078:6;15053:53;:::i;:::-;15143:3;15132:9;15128:19;15195:6;15221:1;15231:209;15247:1;15242:3;15239:10;15231:209;;;15309:15;;15295:30;;15348:4;15374:14;;;;15413:17;;;;15268:1;15259:11;15231:209;;;15235:3;;;13819:1627;;;;;;;:::o;15451:277::-;15518:6;15571:2;15559:9;15550:7;15546:23;15542:32;15539:52;;;15587:1;15584;15577:12;15539:52;15619:9;15613:16;15672:5;15665:13;15658:21;15651:5;15648:32;15638:60;;15694:1;15691;15684:12;15733:179;15768:3;15810:1;15792:16;15789:23;15786:120;;;15856:1;15853;15850;15835:23;-1:-1:-1;15893:1:80;15887:8;15882:3;15878:18;15733:179;:::o;15917:671::-;15956:3;15998:4;15980:16;15977:26;15974:39;;;15917:671;:::o;15974:39::-;16040:2;16034:9;-1:-1:-1;;16105:16:80;16101:25;;16098:1;16034:9;16077:50;16156:4;16150:11;16180:16;16215:18;16286:2;16279:4;16271:6;16267:17;16264:25;16259:2;16251:6;16248:14;16245:45;16242:58;;;16293:5;;;;;15917:671;:::o;16242:58::-;16330:6;16324:4;16320:17;16309:28;;16366:3;16360:10;16393:2;16385:6;16382:14;16379:27;;;16399:5;;;;;;15917:671;:::o;16379:27::-;16483:2;16464:16;16458:4;16454:27;16450:36;16443:4;16434:6;16429:3;16425:16;16421:27;16418:69;16415:82;;;16490:5;;;;;;15917:671;:::o;16415:82::-;16506:57;16557:4;16548:6;16540;16536:19;16532:30;16526:4;16506:57;:::i;:::-;-1:-1:-1;16579:3:80;;15917:671;-1:-1:-1;;;;;15917:671:80:o;16593:250::-;16678:1;16688:113;16702:6;16699:1;16696:13;16688:113;;;16778:11;;;16772:18;16759:11;;;16752:39;16724:2;16717:10;16688:113;;;-1:-1:-1;;16835:1:80;16817:16;;16810:27;16593:250::o;16848:396::-;16997:2;16986:9;16979:21;16960:4;17029:6;17023:13;17072:6;17067:2;17056:9;17052:18;17045:34;17088:79;17160:6;17155:2;17144:9;17140:18;17135:2;17127:6;17123:15;17088:79;:::i;:::-;17228:2;17207:15;-1:-1:-1;;17203:29:80;17188:45;;;;17235:2;17184:54;;16848:396;-1:-1:-1;;16848:396:80:o;17447:410::-;17649:2;17631:21;;;17688:2;17668:18;;;17661:30;17727:34;17722:2;17707:18;;17700:62;-1:-1:-1;;;17793:2:80;17778:18;;17771:44;17847:3;17832:19;;17447:410::o;17862:606::-;18140:4;18182:3;18171:9;18167:19;18159:27;;18213:6;18202:9;18195:25;18256:6;18251:2;18240:9;18236:18;18229:34;18299:6;18294:2;18283:9;18279:18;18272:34;18342:6;18337:2;18326:9;18322:18;18315:34;18400:6;18392;18386:3;18375:9;18371:19;18358:49;18456:4;18448:6;18444:17;18438:3;18427:9;18423:19;18416:46;17862:606;;;;;;;;;:::o;18733:225::-;18800:9;;;18821:11;;;18818:134;;;18874:10;18869:3;18865:20;18862:1;18855:31;18909:4;18906:1;18899:15;18937:4;18934:1;18927:15;19798:261;19868:3;-1:-1:-1;;;;;19889:31:80;;19886:51;;;19933:1;19930;19923:12;19886:51;19969:6;19966:1;19962:14;20010:8;20003:5;19998:3;19985:34;20035:18;;;;;19798:261;-1:-1:-1;;;19798:261:80:o;20064:951::-;20495:6;20490:3;20483:19;20465:3;20521:2;20553:6;20548:2;20543:3;20539:12;20532:28;20591:2;20586:3;20582:12;20640:6;20664:1;20674:204;20688:6;20685:1;20682:13;20674:204;;;20782:10;20755:25;20773:6;20755:25;:::i;:::-;20751:42;20737:57;;20816:14;;;;20853:15;;;;20710:1;20703:9;20674:204;;;20678:3;;20894:115;20948:60;21002:5;20994:6;20986;20948:60;:::i;:::-;20940:6;20932;20894:115;:::i;:::-;20887:122;20064:951;-1:-1:-1;;;;;;;;;;;;20064:951:80:o;21020:489::-;21334:10;21329:3;21325:20;21316:6;21311:3;21307:16;21303:43;21298:3;21291:56;21376:6;21372:1;21367:3;21363:11;21356:27;21413:6;21408:2;21403:3;21399:12;21392:28;21273:3;21436:67;21499:2;21494:3;21490:12;21482:6;21474;21436:67;:::i;:::-;21429:74;21020:489;-1:-1:-1;;;;;;;21020:489:80:o;22231:184::-;22301:6;22354:2;22342:9;22333:7;22329:23;22325:32;22322:52;;;22370:1;22367;22360:12;22322:52;-1:-1:-1;22393:16:80;;22231:184;-1:-1:-1;22231:184:80:o;23245:407::-;23447:2;23429:21;;;23486:2;23466:18;;;23459:30;23525:34;23520:2;23505:18;;23498:62;-1:-1:-1;;;23591:2:80;23576:18;;23569:41;23642:3;23627:19;;23245:407::o;24478:287::-;24607:3;24645:6;24639:13;24661:66;24720:6;24715:3;24708:4;24700:6;24696:17;24661:66;:::i;:::-;24743:16;;;;;24478:287;-1:-1:-1;;24478:287:80:o",
    "linkReferences": {},
    "immutableReferences": {
      "29832": [
        {
          "start": 1614,
          "length": 32
        },
        {
          "start": 1687,
          "length": 32
        },
        {
          "start": 1909,
          "length": 32
        },
        {
          "start": 1973,
          "length": 32
        },
        {
          "start": 2957,
          "length": 32
        },
        {
          "start": 3021,
          "length": 32
        },
        {
          "start": 4100,
          "length": 32
        },
        {
          "start": 4164,
          "length": 32
        },
        {
          "start": 4347,
          "length": 32
        },
        {
          "start": 4411,
          "length": 32
        },
        {
          "start": 4583,
          "length": 32
        },
        {
          "start": 4647,
          "length": 32
        },
        {
          "start": 4903,
          "length": 32
        },
        {
          "start": 4967,
          "length": 32
        },
        {
          "start": 5495,
          "length": 32
        },
        {
          "start": 5559,
          "length": 32
        },
        {
          "start": 5737,
          "length": 32
        },
        {
          "start": 5801,
          "length": 32
        },
        {
          "start": 6143,
          "length": 32
        },
        {
          "start": 6207,
          "length": 32
        },
        {
          "start": 6346,
          "length": 32
        },
        {
          "start": 6410,
          "length": 32
        },
        {
          "start": 6533,
          "length": 32
        },
        {
          "start": 6597,
          "length": 32
        },
        {
          "start": 6748,
          "length": 32
        },
        {
          "start": 6924,
          "length": 32
        },
        {
          "start": 6988,
          "length": 32
        },
        {
          "start": 7323,
          "length": 32
        },
        {
          "start": 7387,
          "length": 32
        },
        {
          "start": 7591,
          "length": 32
        },
        {
          "start": 7655,
          "length": 32
        },
        {
          "start": 7850,
          "length": 32
        },
        {
          "start": 7914,
          "length": 32
        },
        {
          "start": 8065,
          "length": 32
        },
        {
          "start": 8129,
          "length": 32
        },
        {
          "start": 8279,
          "length": 32
        },
        {
          "start": 8343,
          "length": 32
        },
        {
          "start": 8567,
          "length": 32
        },
        {
          "start": 8631,
          "length": 32
        },
        {
          "start": 8812,
          "length": 32
        },
        {
          "start": 8876,
          "length": 32
        },
        {
          "start": 9357,
          "length": 32
        },
        {
          "start": 9421,
          "length": 32
        },
        {
          "start": 9700,
          "length": 32
        },
        {
          "start": 9764,
          "length": 32
        },
        {
          "start": 9905,
          "length": 32
        },
        {
          "start": 9969,
          "length": 32
        },
        {
          "start": 10119,
          "length": 32
        },
        {
          "start": 10183,
          "length": 32
        },
        {
          "start": 10331,
          "length": 32
        },
        {
          "start": 10395,
          "length": 32
        },
        {
          "start": 10881,
          "length": 32
        },
        {
          "start": 10945,
          "length": 32
        },
        {
          "start": 11582,
          "length": 32
        },
        {
          "start": 11646,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "NO_SUCH_ROOT()": "561f204b",
    "acceptOwnership()": "79ba5097",
    "calculateIdentityDeletionInputHash(bytes,uint256,uint256,uint32)": "31e4e992",
    "calculateIdentityRegistrationInputHash(uint32,uint256,uint256,uint256[])": "8c76a909",
    "calculateIdentityUpdateInputHash(uint256,uint256,uint32[],uint256[],uint256[])": "86ec599a",
    "deleteIdentities(uint256[8],uint32,bytes,uint256,uint256)": "23cfdba5",
    "getDeleteIdentitiesVerifierLookupTableAddress()": "3e8919b6",
    "getIdentityUpdateVerifierLookupTableAddress()": "4ffbdde5",
    "getRegisterIdentitiesVerifierLookupTableAddress()": "8fc22e9f",
    "getRootHistoryExpiry()": "43f974cb",
    "getSemaphoreVerifierAddress()": "f2038f95",
    "getTreeDepth()": "8e5cdd50",
    "identityOperator()": "f134b6ca",
    "initialize(uint8,uint256,address,address,address)": "38c87065",
    "initializeV2(address)": "29b6eca9",
    "latestRoot()": "d7b0fef1",
    "owner()": "8da5cb5b",
    "pendingOwner()": "e30c3978",
    "proxiableUUID()": "52d1902d",
    "queryRoot(uint256)": "3f7c178d",
    "registerIdentities(uint256[8],uint256,uint32,uint256[],uint256)": "2217b211",
    "renounceOwnership()": "715018a6",
    "requireValidRoot(uint256)": "f2358e1d",
    "setDeleteIdentitiesVerifierLookupTable(address)": "aa4a729e",
    "setIdentityOperator(address)": "a7bba582",
    "setIdentityUpdateVerifierLookupTable(address)": "6b056600",
    "setRegisterIdentitiesVerifierLookupTable(address)": "2f059fca",
    "setRootHistoryExpiry(uint256)": "c70aa727",
    "setSemaphoreVerifier(address)": "0e3a12f3",
    "transferOwnership(address)": "f2fde38b",
    "updateIdentities(uint256[8],uint256,uint32[],uint256[],uint256[],uint256)": "b843b4e5",
    "upgradeTo(address)": "3659cfe6",
    "upgradeToAndCall(address,bytes)": "4f1ef286",
    "verifyProof(uint256,uint256,uint256,uint256,uint256[8])": "354ca120"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotRenounceOwnership\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ImplementationNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidCommitment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStateBridgeAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedInputLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestRoot\",\"type\":\"uint256\"}],\"name\":\"NotLatestRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofValidationFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StateBridgeAlreadyDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StateBridgeAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum WorldIDIdentityManagerImplV1.UnreducedElementType\",\"name\":\"elementType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"element\",\"type\":\"uint256\"}],\"name\":\"UnreducedElement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"UnsupportedTreeDepth\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum WorldIDIdentityManagerImplV1.Dependency\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"DependencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"IdentityOperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldExpiryTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newExpiryTime\",\"type\":\"uint256\"}],\"name\":\"RootHistoryExpirySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"StateBridgeStateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum WorldIDIdentityManagerImplV1.TreeChange\",\"name\":\"kind\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"}],\"name\":\"TreeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_treeDepth\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialRoot\",\"type\":\"uint256\"}],\"name\":\"WorldIDIdentityManagerImplInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NO_SUCH_ROOT\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"supersededTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct WorldIDIdentityManagerImplV1.RootInfo\",\"name\":\"rootInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"packedDeletionIndices\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"batchSize\",\"type\":\"uint32\"}],\"name\":\"calculateIdentityDeletionInputHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"startIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"identityCommitments\",\"type\":\"uint256[]\"}],\"name\":\"calculateIdentityRegistrationInputHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"leafIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"oldIdentities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newIdentities\",\"type\":\"uint256[]\"}],\"name\":\"calculateIdentityUpdateInputHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"deletionProof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint32\",\"name\":\"batchSize\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"packedDeletionIndices\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"}],\"name\":\"deleteIdentities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeleteIdentitiesVerifierLookupTableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdentityUpdateVerifierLookupTableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisterIdentitiesVerifierLookupTableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRootHistoryExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSemaphoreVerifierAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreeDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_treeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialRoot\",\"type\":\"uint256\"},{\"internalType\":\"contract VerifierLookupTable\",\"name\":\"_batchInsertionVerifiers\",\"type\":\"address\"},{\"internalType\":\"contract VerifierLookupTable\",\"name\":\"_batchUpdateVerifiers\",\"type\":\"address\"},{\"internalType\":\"contract ISemaphoreVerifier\",\"name\":\"_semaphoreVerifier\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VerifierLookupTable\",\"name\":\"_batchUpdateVerifiers\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"queryRoot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"supersededTimestamp\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"struct WorldIDIdentityManagerImplV1.RootInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"insertionProof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256[]\",\"name\":\"identityCommitments\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"}],\"name\":\"registerIdentities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"requireValidRoot\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VerifierLookupTable\",\"name\":\"newTable\",\"type\":\"address\"}],\"name\":\"setDeleteIdentitiesVerifierLookupTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIdentityOperator\",\"type\":\"address\"}],\"name\":\"setIdentityOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VerifierLookupTable\",\"name\":\"newTable\",\"type\":\"address\"}],\"name\":\"setIdentityUpdateVerifierLookupTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract VerifierLookupTable\",\"name\":\"newTable\",\"type\":\"address\"}],\"name\":\"setRegisterIdentitiesVerifierLookupTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExpiryTime\",\"type\":\"uint256\"}],\"name\":\"setRootHistoryExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISemaphoreVerifier\",\"name\":\"newVerifier\",\"type\":\"address\"}],\"name\":\"setSemaphoreVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"updateProof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256\",\"name\":\"preRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint32[]\",\"name\":\"leafIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"oldIdentities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newIdentities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"postRoot\",\"type\":\"uint256\"}],\"name\":\"updateIdentities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signalHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalNullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Worldcoin\",\"details\":\"The manager is based on the principle of verifying externally-created Zero Knowledge Proofs      to perform the insertions.This is the implementation delegated to by a proxy.\",\"errors\":{\"InvalidCommitment(uint256)\":[{\"params\":{\"index\":\"The index in the array of identity commitments where the invalid commitment was        found.\"}}],\"NotLatestRoot(uint256,uint256)\":[{\"params\":{\"latestRoot\":\"The actual latest root at the time of the transaction.\",\"providedRoot\":\"The root that was provided as the `preRoot` for a transaction.\"}}],\"Unauthorized(address)\":[{\"params\":{\"user\":\"The user that attempted the action that they were not authorised for.\"}}],\"UnreducedElement(uint8,uint256)\":[{\"details\":\"`r` in this case is given by `SNARK_SCALAR_FIELD`.\",\"params\":{\"element\":\"The value of that element.\",\"elementType\":\"The kind of element that was encountered unreduced.\"}}],\"UnsupportedTreeDepth(uint8)\":[{\"params\":{\"depth\":\"Passed tree depth.\"}}]},\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"DependencyUpdated(uint8,address,address)\":{\"params\":{\"kind\":\"The kind of dependency that was updated.\",\"newAddress\":\"The new address of that dependency.\",\"oldAddress\":\"The old address of that dependency.\"}},\"IdentityOperatorChanged(address,address)\":{\"params\":{\"newOperator\":\"The address of the new identity operator.\",\"oldOperator\":\"The address of the old identity operator.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RootHistoryExpirySet(uint256,uint256)\":{\"params\":{\"newExpiryTime\":\"The expiry time after the change.\",\"oldExpiryTime\":\"The expiry time prior to the change.\"}},\"StateBridgeStateChange(bool)\":{\"params\":{\"isEnabled\":\"Set to `true` if the event comes from the state bridge being enabled,        `false` otherwise.\"}},\"TreeChanged(uint256,uint8,uint256)\":{\"params\":{\"kind\":\"Either \\\"insertion\\\" or \\\"update\\\", the kind of alteration that was made to the        tree.\",\"postRoot\":\"The value of the tree's root after the update.\",\"preRoot\":\"The value of the tree's root before the update.\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"},\"WorldIDIdentityManagerImplInitialized(uint8,uint256)\":{\"params\":{\"_treeDepth\":\"The depth of the MerkeTree\",\"initialRoot\":\"The initial value for the `latestRoot` in the contract. When deploying        this should be set to the root of the empty tree.\"}}},\"kind\":\"dev\",\"methods\":{\"NO_SUCH_ROOT()\":{\"details\":\"Can be checked against when querying for root data.\"},\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"calculateIdentityDeletionInputHash(bytes,uint256,uint256,uint32)\":{\"details\":\"Implements the computation described below.the deletion indices are packed into bytes calldata where each deletion index is 32 bits     wide. The indices are encoded using abi.encodePacked for testing. We keccak hash all input to save verification gas. Inputs for the hash are arranged as follows: packedDeletionIndices || PreRoot || PostRoot   32 bits * batchSize ||   256   ||    256\",\"params\":{\"batchSize\":\"The number of identities that were deleted in this batch\",\"packedDeletionIndices\":\"The indices of the identities that were deleted from the tree.\",\"postRoot\":\"The root value of the tree after these insertions were made.\",\"preRoot\":\"The root value of the tree before these insertions were made.\"},\"returns\":{\"hash\":\"The input hash calculated as described below.\"}},\"calculateIdentityRegistrationInputHash(uint32,uint256,uint256,uint256[])\":{\"details\":\"Implements the computation described below.\",\"params\":{\"identityCommitments\":\"The identities that were added to the tree to produce `postRoot`.\",\"postRoot\":\"The root value of the tree after these insertions were made.\",\"preRoot\":\"The root value of the tree before these insertions were made.\",\"startIndex\":\"The index in the tree from which inserting started.\"},\"returns\":{\"hash\":\"The input hash calculated as described below. We keccak hash all input to save verification gas. Inputs are arranged as follows: StartIndex || PreRoot || PostRoot || IdComms[0] || IdComms[1] || ... || IdComms[batchSize-1]     32\\t   ||   256   ||   256    ||    256     ||    256     || ... ||     256 bits\"}},\"calculateIdentityUpdateInputHash(uint256,uint256,uint32[],uint256[],uint256[])\":{\"details\":\"Implements the computation described below.\",\"params\":{\"leafIndices\":\"The array of leaf indices at which the update operations take place in        the tree. Elements in this array are extended to 256 bits when encoding.\",\"newIdentities\":\"The array of new values for the identities. Length must match that of        `leafIndices`.\",\"oldIdentities\":\"The array of old values for the identities. Length must match that of        `leafIndices`.\",\"postRoot\":\"The root value of the tree after the updates were made.\",\"preRoot\":\"The root value of the tree before the updates were made.\"},\"returns\":{\"hash\":\"The input hash calculated as described below. The arrays `leafIndices`, `oldIdentities` and `newIdentities` are arranged such that the triple at an element `i` in those arrays corresponds to one update operation. We keccak hash all input to save verification gas. The inputs are arranged as follows: preRoot || postRoot || ix[0] || ... || ix[n] || oi[0] || ... || oi[n] || ni[0] || ... || ni[n] ||   256   ||    256   ||  256  || ... ||  256  ||  256  || ... ||  256  ||  256  || ... ||  256  || where: - `ix[i] == leafIndices[i]` - `oi[i] == oldIdentities[i]` - `ni[i] == newIdentities[i]` - `id[i] == identities[i]` - `n == batchSize - 1`\"}},\"deleteIdentities(uint256[8],uint32,bytes,uint256,uint256)\":{\"custom:reverts\":\"Unauthorized If the message sender is not authorised to add identities.InvalidCommitment If one or more of the provided commitments is invalid.NotLatestRoot If the provided `preRoot` is not the latest root.ProofValidationFailure If `deletionProof` cannot be verified using the                 provided inputs.UnreducedElement If any of the `preRoot`, `postRoot` and                 `identityCommitments` is not an element of the field `Kr`. It describes the                 type and value of the unreduced element.VerifierLookupTable.NoSuchVerifier If the batch sizes doesn't match a known                 verifier.VerifierLookupTable.BatchTooLarge If the batch size exceeds the maximum                 batch size.\",\"details\":\"Can only be called by the owner.Deletion is performed off-chain and verified on-chain via the `deletionProof`.      This saves gas and time over deleting identities one at a time.\",\"params\":{\"batchSize\":\"The number of identities that are to be deleted in the current batch.\",\"deletionProof\":\"The proof that given the conditions (`preRoot` and `packedDeletionIndices`),        deletion into the tree results in `postRoot`. Elements 0 and 1 are the `x` and `y`        coordinates for `ar` respectively. Elements 2 and 3 are the `x` coordinate for `bs`,         and elements 4 and 5 are the `y` coordinate for `bs`. Elements 6 and 7 are the `x`         and `y` coordinates for `krs`.\",\"packedDeletionIndices\":\"The indices of the identities that were deleted from the tree.\",\"postRoot\":\"The root obtained after deleting all of `identityCommitments` into the tree        described by `preRoot`. Must be an element of the field `Kr`.\",\"preRoot\":\"The value for the root of the tree before the `identityCommitments` have been       inserted. Must be an element of the field `Kr`.\"}},\"getDeleteIdentitiesVerifierLookupTableAddress()\":{\"details\":\"The deletion verifier supports batch deletions of size 10, 100 and 1000 members per batch.\",\"returns\":{\"_0\":\"addr The address of the contract being used as the verifier lookup table.\"}},\"getIdentityUpdateVerifierLookupTableAddress()\":{\"details\":\"The update verifier is also used for member removals.\",\"returns\":{\"_0\":\"addr The address of the contract being used as the verifier lookup table.\"}},\"getRegisterIdentitiesVerifierLookupTableAddress()\":{\"returns\":{\"_0\":\"addr The address of the contract being used as the verifier lookup table.\"}},\"getRootHistoryExpiry()\":{\"returns\":{\"_0\":\"expiryTime The amount of time it takes for a root to expire.\"}},\"getSemaphoreVerifierAddress()\":{\"returns\":{\"_0\":\"addr The address of the contract being used as the verifier.\"}},\"getTreeDepth()\":{\"returns\":{\"_0\":\"initializedTreeDepth Tree depth.\"}},\"identityOperator()\":{\"returns\":{\"_0\":\"_ The address authorized to perform identity operations.\"}},\"initialize(uint8,uint256,address,address,address)\":{\"custom:reverts\":\"string If called more than once at the same initialisation number.UnsupportedTreeDepth If passed tree depth is not among defined values.\",\"details\":\"Must be called exactly once.This is marked `reinitializer()` to allow for updated initialisation steps when working      with upgrades based upon this contract. Be aware that there are only 256 (zero-indexed)      initialisations allowed, so decide carefully when to use them. Many cases can safely be      replaced by use of setters.This function is explicitly not virtual as it does not make sense to override even when      upgrading. Create a separate initializer function instead.\",\"params\":{\"_batchInsertionVerifiers\":\"The verifier lookup table for batch insertions.\",\"_batchUpdateVerifiers\":\"The verifier lookup table for batch updates.\",\"_semaphoreVerifier\":\"The verifier to use for semaphore protocol proofs.\",\"_treeDepth\":\"The depth of the MerkeTree\",\"initialRoot\":\"The initial value for the `latestRoot` in the contract. When deploying        this should be set to the root of the empty tree.\"}},\"initializeV2(address)\":{\"details\":\"Must be called exactly onceThis is marked `reinitializer()` to allow for updated initialisation steps when working      with upgrades based upon this contract. Be aware that there are only 256 (zero-indexed)      initialisations allowed, so decide carefully when to use them. Many cases can safely be      replaced by use of setters.This function is explicitly not virtual as it does not make sense to override even when      upgrading. Create a separate initializer function instead.\"},\"latestRoot()\":{\"returns\":{\"_0\":\"root The value of the latest tree root.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"queryRoot(uint256)\":{\"details\":\"Should be used sparingly as the query can be quite expensive.\",\"params\":{\"root\":\"The root for which you are querying information.\"},\"returns\":{\"_0\":\"rootInfo The information about `root`, or `NO_SUCH_ROOT` if `root` does not exist.         Note that if the queried root is the current, the timestamp will be invalid as the         root has not been superseded.\"}},\"registerIdentities(uint256[8],uint256,uint32,uint256[],uint256)\":{\"custom:reverts\":\"Unauthorized If the message sender is not authorised to add identities.NotLatestRoot If the provided `preRoot` is not the latest root.ProofValidationFailure If `insertionProof` cannot be verified using the                 provided inputs.VerifierLookupTable.NoSuchVerifier If the batch sizes doesn't match a known                 verifier.VerifierLookupTable.BatchTooLarge If the batch size exceeds the maximum                 batch size.\",\"params\":{\"identityCommitments\":\"The identities that were inserted into the tree starting at        `startIndex` and `preRoot` to give `postRoot`. All of the commitments must be        elements of the field `Kr`.\",\"postRoot\":\"The root obtained after inserting all of `identityCommitments` into the tree        described by `preRoot`. Must be an element of the field `Kr`. (alread in reduced form)\",\"startIndex\":\"The position in the tree at which the insertions were made.\"}},\"renounceOwnership()\":{\"details\":\"This function is intentionally not `virtual` as we do not want it to be possible to      renounce ownership for any WorldID implementation.This function is marked as `onlyOwner` to maintain the access restriction from the base      contract.\"},\"requireValidRoot(uint256)\":{\"custom:reverts\":\"ExpiredRoot If the provided `root` has expired.NonExistentRoot If the provided `root` does not exist in the history.\",\"details\":\"A root is valid if it is either the latest root, or not the latest root but has not      expired.\",\"params\":{\"root\":\"The root of the merkle tree to check for validity.\"}},\"setDeleteIdentitiesVerifierLookupTable(address)\":{\"details\":\"Only the owner of the contract can call this function.\",\"params\":{\"newTable\":\"The new verifier lookup table to be used for verifying identity        deletions.\"}},\"setIdentityOperator(address)\":{\"params\":{\"newIdentityOperator\":\"The address of the new identity operator.\"},\"returns\":{\"_0\":\"_ The address of the old identity operator.\"}},\"setIdentityUpdateVerifierLookupTable(address)\":{\"details\":\"Only the owner of the contract can call this function.The update verifier is also used for member removals.\",\"params\":{\"newTable\":\"The new lookup table instance to be used for verifying identity updates.\"}},\"setRegisterIdentitiesVerifierLookupTable(address)\":{\"details\":\"Only the owner of the contract can call this function.\",\"params\":{\"newTable\":\"The new verifier lookup table to be used for verifying identity        registrations.\"}},\"setRootHistoryExpiry(uint256)\":{\"details\":\"Only the owner of the contract can call this function.\",\"params\":{\"newExpiryTime\":\"The new time to use to expire roots.\"}},\"setSemaphoreVerifier(address)\":{\"details\":\"Only the owner of the contract can call this function.\",\"params\":{\"newVerifier\":\"The new verifier instance to be used for verifying semaphore proofs.\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateIdentities(uint256[8],uint256,uint32[],uint256[],uint256[],uint256)\":{\"custom:reverts\":\"Unauthorized If the message sender is not authorised to update identities.NotLatestRoot If the provided `preRoot` is not the latest root.MismatchedInputLengths If the provided arrays for `leafIndices`,                 `oldIdentities` and `newIdentities` do not match in length.ProofValidationFailure If `removalProof` cannot be verified using the                 provided inputs.UnreducedElement If any of the `preRoot`, `postRoot` and `identities` is not                 an element of the field `Kr`. It describes the type and value of the                 unreduced element.NoSuchVerifier If the batch sizes doesn't match a known verifier.\",\"params\":{\"leafIndices\":\"The array of leaf indices at which the update operations take place in        the tree. Elements in this array are extended to 256 bits when encoding.\",\"newIdentities\":\"The array of new values for the identities. Length must match that of        `leafIndices`.\",\"oldIdentities\":\"The array of old values for the identities. Length must match that of        `leafIndices`.\",\"postRoot\":\"The root obtained after removing all of `removedIdentities` from the tree        described by `preRoot`. Must be an element of the field `Kr`. The arrays `leafIndices`, `oldIdentities` and `newIdentities` are arranged such that the triple at an element `i` in those arrays corresponds to one update operation.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"verifyProof(uint256,uint256,uint256,uint256,uint256[8])\":{\"custom:reverts\":\"string If the zero-knowledge proof cannot be verified for the public inputs.\",\"details\":\"Note that a double-signaling check is not included here, and should be carried by the      caller.\",\"params\":{\"externalNullifierHash\":\"A keccak256 hash of the external nullifier\",\"nullifierHash\":\"The nullifier hash\",\"proof\":\"The zero-knowledge proof\",\"root\":\"The of the Merkle tree\",\"signalHash\":\"A keccak256 hash of the Semaphore signal\"}}},\"title\":\"WorldID Identity Manager Implementation Version 2\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotRenounceOwnership()\":[{\"notice\":\"Thrown when an attempt is made to renounce ownership.\"}],\"ExpiredRoot()\":[{\"notice\":\"Thrown when attempting to validate a root that has expired.\"}],\"ImplementationNotInitialized()\":[{\"notice\":\"Thrown when attempting to call a function while the implementation has not been         initialized.\"}],\"InvalidCommitment(uint256)\":[{\"notice\":\"Thrown when one or more of the identity commitments to be inserted is invalid.\"}],\"InvalidStateBridgeAddress()\":[{\"notice\":\"Thrown when attempting to set the state bridge address to the zero address.\"}],\"MismatchedInputLengths()\":[{\"notice\":\"Thrown when the inputs to `removeIdentities` or `updateIdentities` do not match in         length.\"}],\"NonExistentRoot()\":[{\"notice\":\"Thrown when attempting to validate a root that has yet to be added to the root         history.\"}],\"NotLatestRoot(uint256,uint256)\":[{\"notice\":\"Thrown when the provided root is not the very latest root.\"}],\"ProofValidationFailure()\":[{\"notice\":\"Thrown when the provided proof cannot be verified for the accompanying inputs.\"}],\"StateBridgeAlreadyDisabled()\":[{\"notice\":\"Thrown when attempting to disable the bridge when it is already disabled.\"}],\"StateBridgeAlreadyEnabled()\":[{\"notice\":\"Thrown when attempting to enable the bridge when it is already enabled.\"}],\"Unauthorized(address)\":[{\"notice\":\"Thrown when trying to execute a privileged action without being the contract         manager.\"}],\"UnreducedElement(uint8,uint256)\":[{\"notice\":\"Thrown when encountering an element that should be reduced as a member of `Fr` but         is not.\"}],\"UnsupportedTreeDepth(uint8)\":[{\"notice\":\"Thrown when Semaphore tree depth is not supported.\"}]},\"events\":{\"DependencyUpdated(uint8,address,address)\":{\"notice\":\"Emitted when a dependency's address is updated via an admin action.\"},\"IdentityOperatorChanged(address,address)\":{\"notice\":\"Emitted when the identity operator is changed.\"},\"RootHistoryExpirySet(uint256,uint256)\":{\"notice\":\"Emitted when the root history expiry time is changed.\"},\"StateBridgeStateChange(bool)\":{\"notice\":\"Emitted when the state bridge is enabled or disabled.\"},\"TreeChanged(uint256,uint8,uint256)\":{\"notice\":\"Emitted when the current root of the tree is updated.\"}},\"kind\":\"user\",\"methods\":{\"NO_SUCH_ROOT()\":{\"notice\":\"A constant representing a root that doesn't exist.\"},\"calculateIdentityDeletionInputHash(bytes,uint256,uint256,uint32)\":{\"notice\":\"Calculates the input hash for the identity deletion verifier.\"},\"calculateIdentityRegistrationInputHash(uint32,uint256,uint256,uint256[])\":{\"notice\":\"Calculates the input hash for the identity registration verifier.\"},\"calculateIdentityUpdateInputHash(uint256,uint256,uint32[],uint256[],uint256[])\":{\"notice\":\"Calculates the input hash for the identity update verifier.\"},\"deleteIdentities(uint256[8],uint32,bytes,uint256,uint256)\":{\"notice\":\"Deletes identities from the WorldID system.\"},\"getDeleteIdentitiesVerifierLookupTableAddress()\":{\"notice\":\"Gets the address for the lookup table of merkle tree verifiers used for batch identity         deletions.\"},\"getIdentityUpdateVerifierLookupTableAddress()\":{\"notice\":\"Gets the address for the lookup table of merkle tree verifiers used for identity         updates.\"},\"getRegisterIdentitiesVerifierLookupTableAddress()\":{\"notice\":\"Gets the address for the lookup table of merkle tree verifiers used for identity         registrations.\"},\"getRootHistoryExpiry()\":{\"notice\":\"Gets the current amount of time used to expire roots in the history.\"},\"getSemaphoreVerifierAddress()\":{\"notice\":\"Gets the address of the verifier used for verification of semaphore proofs.\"},\"getTreeDepth()\":{\"notice\":\"Gets the Semaphore tree depth the contract was initialized with.\"},\"identityOperator()\":{\"notice\":\"Gets the address that is authorised to perform identity operations on this identity         manager instance.\"},\"initialize(uint8,uint256,address,address,address)\":{\"notice\":\"Initializes the contract.\"},\"initializeV2(address)\":{\"notice\":\"Initializes the V2 implementation contract.\"},\"latestRoot()\":{\"notice\":\"Allows a caller to query the latest root.\"},\"queryRoot(uint256)\":{\"notice\":\"Allows a caller to query the root history for information about a given root.\"},\"renounceOwnership()\":{\"notice\":\"Ensures that ownership of WorldID implementations cannot be renounced.\"},\"requireValidRoot(uint256)\":{\"notice\":\"Reverts if the provided root value is not valid.\"},\"setDeleteIdentitiesVerifierLookupTable(address)\":{\"notice\":\"Sets the address for the lookup table of merkle tree verifiers used for identity         deletions.\"},\"setIdentityOperator(address)\":{\"notice\":\"Sets the address that is authorised to perform identity operations on this identity         manager instance.\"},\"setIdentityUpdateVerifierLookupTable(address)\":{\"notice\":\"Sets the address for the lookup table of merkle tree verifiers to be used for         verification of identity updates.\"},\"setRegisterIdentitiesVerifierLookupTable(address)\":{\"notice\":\"Sets the address for the lookup table of merkle tree verifiers used for identity         registrations.\"},\"setRootHistoryExpiry(uint256)\":{\"notice\":\"Sets the time to wait before expiring a root from the root history.\"},\"setSemaphoreVerifier(address)\":{\"notice\":\"Sets the address for the semaphore verifier to be used for verification of         semaphore proofs.\"},\"verifyProof(uint256,uint256,uint256,uint256,uint256[8])\":{\"notice\":\"A verifier for the semaphore protocol.\"}},\"notice\":\"An implementation of a batch-based identity manager for the WorldID protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/WorldIDIdentityManagerImplV2.sol\":\"WorldIDIdentityManagerImplV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@zk-kit/=lib/zk-kit/packages/\",\":contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":semaphore/=lib/semaphore/packages/contracts/contracts/\",\":solmate/=lib/solmate/src/\",\":zk-kit/=lib/zk-kit/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol\":{\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79ecc0838b0649460c0a538a4adb55b2b530e726c5526afc5e09c8eea4f3af13\",\"dweb:/ipfs/QmUxugyGDGGeLzDFi8QDH2vQMtCFaheiujWv58SuGVx4bZ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a\",\"dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\":{\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053\",\"dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2\",\"dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\":{\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1\",\"dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618\",\"dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1\",\"dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06\",\"dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c\",\"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\":{\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3\",\"dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0x923b9774b81c1abfb992262ae7763b6e6de77b077a7180d53c6ebb7b1c8bd648\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53445dc0431f9b45c06f567c6091da961d4087bec0010cca5bd62100fa624a38\",\"dweb:/ipfs/QmNvBYpBv183czrAqNXr76E8M3LF93ouAJFeAcHfb59Rcx\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol\":{\"keccak256\":\"0x7cdab82b437a17902683a413c86d14f512674a0710007bf44c584a2d2d3ca833\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ffe4db7a9f3cdd5a5d019462c2859f4f98f7aae08704afdcb3ef0d08d966bbeb\",\"dweb:/ipfs/QmTCHSuoi22dAu55qv4TcENyTmv5mTpAoxmYWD8cRnEp3M\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"lib/semaphore/packages/contracts/contracts/base/Pairing.sol\":{\"keccak256\":\"0x44390032d1247a0e3931eb39f1220f170db653c6b3b4321b2e2b0034f5e07334\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://725cc4bdf047d17bf9d47c9a0205d90897c0da334de8e556c1a3049b1beb9aed\",\"dweb:/ipfs/QmSo7SXpqyrqHFhYi7F8SGjcVxCdVr6FNdgiw7Qfre1NGt\"]},\"lib/semaphore/packages/contracts/contracts/interfaces/ISemaphoreVerifier.sol\":{\"keccak256\":\"0x5b5b1118ed7936014d3e410419d6048cc9c0ae69fd700442593f2c2cc782e1af\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://601cf2c7e3c98735ff38eaff225af090ec847d63ec599ecc2340323145430668\",\"dweb:/ipfs/QmUoZYgge8GmQokXrYiRXn24s4HgBZetiNWQssiSoTFrdi\"]},\"src/WorldIDIdentityManagerImplV1.sol\":{\"keccak256\":\"0xa1065360c830348be5e6f45dfb766d9f415d0321170a804da0b2f56338c14b36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cd10fbb5eaf1f57cfe026baf79ee8cb7ca9d7db50599b77062d2634a147e9645\",\"dweb:/ipfs/QmdtRnh5nPkRFynH2mNsYvaAur8QPwsuCg6A1AAQnKB291\"]},\"src/WorldIDIdentityManagerImplV2.sol\":{\"keccak256\":\"0xa88ed74cd795d2a9a7cbb99f88fa1393c25d7807525c6f081b57d163180f887b\",\"urls\":[\"bzz-raw://5e045ea6313140813d515f5ceb43624cba08cfd14657445a731ba76a1e8252f1\",\"dweb:/ipfs/Qmb4kfWzbV3gVjrhfVo2PphCijTXxdBUvz9N1mV3Mivcd5\"]},\"src/abstract/WorldIDImpl.sol\":{\"keccak256\":\"0xccfff2c5d7af4e505ed13b7d46011d5544317343ea92e7beb874e4d69358e6d0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://428860598ca38e42e29892a0b4759c4d3010378f54c3b3e4392f965ff091076e\",\"dweb:/ipfs/QmYPjcDRTr1UEeSbS7ssdGjbDHzAqjRNKBsYJqKJWeL8bZ\"]},\"src/data/VerifierLookupTable.sol\":{\"keccak256\":\"0xfd213b79aaec8d205c50ab3ed5c4ebed06ae602ed526a820340adc1c76745fbc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6af992a56a7cee8124af7f16d74dc8a2a7ae5f8b3059b92d46862e44c3804b83\",\"dweb:/ipfs/QmV9bQtJ9PjnwsiiZMUGJANB3znSxJ6ACTqWv9WkQeoeB3\"]},\"src/interfaces/IBaseWorldID.sol\":{\"keccak256\":\"0xcec58605726864d72e35d62c85e002acc98d3f8fa19d01b49fff461c2767c144\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://57714fcbceb0497f3fe8906778a837082939489fbb0bd930d015ad6e971913d5\",\"dweb:/ipfs/QmQVVmLr9CEkR727ByMF96a8MbwAeB4AQQWvxneg2Avkq8\"]},\"src/interfaces/IBridge.sol\":{\"keccak256\":\"0x0931c789450d21479da5d4de8c6435fca965660f6e1bd746fff958f4c20cf2ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c564b4d4a15e8075555077a043d773bb20133548376402ff3dbc0eccb57435d\",\"dweb:/ipfs/QmXQRihAFdtfyjTNeHmx9nmNHiS1wy2658Y5aXCXo2tKSQ\"]},\"src/interfaces/ITreeVerifier.sol\":{\"keccak256\":\"0xb572aeae7331d96981d46b0dd4408db9ad507a06a2dbf0624386114b2244c8ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6159630f78e9e0b3a326d064772713f8c1e73172718c2a6d5af1fb36b35c5991\",\"dweb:/ipfs/QmPN5VyQvonPfPdTvrmP5wqsFT3QNW3RwC8DHYdEtwXZT4\"]},\"src/interfaces/IWorldID.sol\":{\"keccak256\":\"0x577908eff2d29d96354a06ab2602ffe6b97aa9d491330efcc2fcd0a88a8acbb1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa0a36a598a851b88cff364b4211dc32081f51940aa8076d9c9b7de8ab126b2f\",\"dweb:/ipfs/QmSne8aRiE8C8RuwEUSk4doETKAGaavrEYyUkwiJc5H8qc\"]},\"src/utils/CheckInitialized.sol\":{\"keccak256\":\"0xfab096b633efd580548007e97920f6088e6d8a5287db84b9aa3d595c02fefcf4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dee612c9dbad59d535e7a72b79191187fd91c06af9cb5b6f68d60274d0ee2c04\",\"dweb:/ipfs/QmVJbSQ8DAN6igasbgHjZTM4NRZ3EjrhK8wFcvUG1wPYtZ\"]},\"src/utils/SemaphoreTreeDepthValidator.sol\":{\"keccak256\":\"0x50140161de381aa963457cfd2ee8831a435bd79040f38794e6ef07365c49c872\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bcc5b8a3a6f5146aa3fdee550c3e80d828b55df63223485da3d5655a591ad661\",\"dweb:/ipfs/QmWfUzbeFoSaPV1E8QxagUnpt5zfmPXgiropUg1GcV6oZs\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "CannotRenounceOwnership"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ExpiredRoot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ImplementationNotInitialized"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "InvalidCommitment"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidStateBridgeAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MismatchedInputLengths"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NonExistentRoot"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "providedRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "latestRoot",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "NotLatestRoot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ProofValidationFailure"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "StateBridgeAlreadyDisabled"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "StateBridgeAlreadyEnabled"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "Unauthorized"
        },
        {
          "inputs": [
            {
              "internalType": "enum WorldIDIdentityManagerImplV1.UnreducedElementType",
              "name": "elementType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "element",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "UnreducedElement"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            }
          ],
          "type": "error",
          "name": "UnsupportedTreeDepth"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousAdmin",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "newAdmin",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "AdminChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "beacon",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "BeaconUpgraded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "enum WorldIDIdentityManagerImplV1.Dependency",
              "name": "kind",
              "type": "uint8",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "oldAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newAddress",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "DependencyUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "oldOperator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOperator",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "IdentityOperatorChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferStarted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "oldExpiryTime",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newExpiryTime",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RootHistoryExpirySet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "StateBridgeStateChange",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "preRoot",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "enum WorldIDIdentityManagerImplV1.TreeChange",
              "name": "kind",
              "type": "uint8",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "postRoot",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "TreeChanged",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Upgraded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "_treeDepth",
              "type": "uint8",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "initialRoot",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "WorldIDIdentityManagerImplInitialized",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "NO_SUCH_ROOT",
          "outputs": [
            {
              "internalType": "struct WorldIDIdentityManagerImplV1.RootInfo",
              "name": "rootInfo",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "root",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "supersededTimestamp",
                  "type": "uint128"
                },
                {
                  "internalType": "bool",
                  "name": "isValid",
                  "type": "bool"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "acceptOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "packedDeletionIndices",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "preRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "batchSize",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateIdentityDeletionInputHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "startIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "preRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "identityCommitments",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateIdentityRegistrationInputHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "preRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint32[]",
              "name": "leafIndices",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256[]",
              "name": "oldIdentities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "newIdentities",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateIdentityUpdateInputHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[8]",
              "name": "deletionProof",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint32",
              "name": "batchSize",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "packedDeletionIndices",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "preRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postRoot",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deleteIdentities"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDeleteIdentitiesVerifierLookupTableAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getIdentityUpdateVerifierLookupTableAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRegisterIdentitiesVerifierLookupTableAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRootHistoryExpiry",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSemaphoreVerifierAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTreeDepth",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "identityOperator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "_treeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "initialRoot",
              "type": "uint256"
            },
            {
              "internalType": "contract VerifierLookupTable",
              "name": "_batchInsertionVerifiers",
              "type": "address"
            },
            {
              "internalType": "contract VerifierLookupTable",
              "name": "_batchUpdateVerifiers",
              "type": "address"
            },
            {
              "internalType": "contract ISemaphoreVerifier",
              "name": "_semaphoreVerifier",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initialize"
        },
        {
          "inputs": [
            {
              "internalType": "contract VerifierLookupTable",
              "name": "_batchUpdateVerifiers",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initializeV2"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "latestRoot",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "pendingOwner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "proxiableUUID",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "root",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "queryRoot",
          "outputs": [
            {
              "internalType": "struct WorldIDIdentityManagerImplV1.RootInfo",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "root",
                  "type": "uint256"
                },
                {
                  "internalType": "uint128",
                  "name": "supersededTimestamp",
                  "type": "uint128"
                },
                {
                  "internalType": "bool",
                  "name": "isValid",
                  "type": "bool"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256[8]",
              "name": "insertionProof",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "preRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "startIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint256[]",
              "name": "identityCommitments",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "postRoot",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerIdentities"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "root",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "requireValidRoot"
        },
        {
          "inputs": [
            {
              "internalType": "contract VerifierLookupTable",
              "name": "newTable",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDeleteIdentitiesVerifierLookupTable"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newIdentityOperator",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setIdentityOperator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "contract VerifierLookupTable",
              "name": "newTable",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setIdentityUpdateVerifierLookupTable"
        },
        {
          "inputs": [
            {
              "internalType": "contract VerifierLookupTable",
              "name": "newTable",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRegisterIdentitiesVerifierLookupTable"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newExpiryTime",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRootHistoryExpiry"
        },
        {
          "inputs": [
            {
              "internalType": "contract ISemaphoreVerifier",
              "name": "newVerifier",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setSemaphoreVerifier"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256[8]",
              "name": "updateProof",
              "type": "uint256[8]"
            },
            {
              "internalType": "uint256",
              "name": "preRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint32[]",
              "name": "leafIndices",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256[]",
              "name": "oldIdentities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "newIdentities",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "postRoot",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateIdentities"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "upgradeTo"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newImplementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "upgradeToAndCall"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "root",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "signalHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifierHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "externalNullifierHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256[8]",
              "name": "proof",
              "type": "uint256[8]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyProof"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "NO_SUCH_ROOT()": {
            "details": "Can be checked against when querying for root data."
          },
          "acceptOwnership()": {
            "details": "The new owner accepts the ownership transfer."
          },
          "calculateIdentityDeletionInputHash(bytes,uint256,uint256,uint32)": {
            "details": "Implements the computation described below.the deletion indices are packed into bytes calldata where each deletion index is 32 bits     wide. The indices are encoded using abi.encodePacked for testing. We keccak hash all input to save verification gas. Inputs for the hash are arranged as follows: packedDeletionIndices || PreRoot || PostRoot   32 bits * batchSize ||   256   ||    256",
            "params": {
              "batchSize": "The number of identities that were deleted in this batch",
              "packedDeletionIndices": "The indices of the identities that were deleted from the tree.",
              "postRoot": "The root value of the tree after these insertions were made.",
              "preRoot": "The root value of the tree before these insertions were made."
            },
            "returns": {
              "hash": "The input hash calculated as described below."
            }
          },
          "calculateIdentityRegistrationInputHash(uint32,uint256,uint256,uint256[])": {
            "details": "Implements the computation described below.",
            "params": {
              "identityCommitments": "The identities that were added to the tree to produce `postRoot`.",
              "postRoot": "The root value of the tree after these insertions were made.",
              "preRoot": "The root value of the tree before these insertions were made.",
              "startIndex": "The index in the tree from which inserting started."
            },
            "returns": {
              "hash": "The input hash calculated as described below. We keccak hash all input to save verification gas. Inputs are arranged as follows: StartIndex || PreRoot || PostRoot || IdComms[0] || IdComms[1] || ... || IdComms[batchSize-1]     32\t   ||   256   ||   256    ||    256     ||    256     || ... ||     256 bits"
            }
          },
          "calculateIdentityUpdateInputHash(uint256,uint256,uint32[],uint256[],uint256[])": {
            "details": "Implements the computation described below.",
            "params": {
              "leafIndices": "The array of leaf indices at which the update operations take place in        the tree. Elements in this array are extended to 256 bits when encoding.",
              "newIdentities": "The array of new values for the identities. Length must match that of        `leafIndices`.",
              "oldIdentities": "The array of old values for the identities. Length must match that of        `leafIndices`.",
              "postRoot": "The root value of the tree after the updates were made.",
              "preRoot": "The root value of the tree before the updates were made."
            },
            "returns": {
              "hash": "The input hash calculated as described below. The arrays `leafIndices`, `oldIdentities` and `newIdentities` are arranged such that the triple at an element `i` in those arrays corresponds to one update operation. We keccak hash all input to save verification gas. The inputs are arranged as follows: preRoot || postRoot || ix[0] || ... || ix[n] || oi[0] || ... || oi[n] || ni[0] || ... || ni[n] ||   256   ||    256   ||  256  || ... ||  256  ||  256  || ... ||  256  ||  256  || ... ||  256  || where: - `ix[i] == leafIndices[i]` - `oi[i] == oldIdentities[i]` - `ni[i] == newIdentities[i]` - `id[i] == identities[i]` - `n == batchSize - 1`"
            }
          },
          "deleteIdentities(uint256[8],uint32,bytes,uint256,uint256)": {
            "custom:reverts": "Unauthorized If the message sender is not authorised to add identities.InvalidCommitment If one or more of the provided commitments is invalid.NotLatestRoot If the provided `preRoot` is not the latest root.ProofValidationFailure If `deletionProof` cannot be verified using the                 provided inputs.UnreducedElement If any of the `preRoot`, `postRoot` and                 `identityCommitments` is not an element of the field `Kr`. It describes the                 type and value of the unreduced element.VerifierLookupTable.NoSuchVerifier If the batch sizes doesn't match a known                 verifier.VerifierLookupTable.BatchTooLarge If the batch size exceeds the maximum                 batch size.",
            "details": "Can only be called by the owner.Deletion is performed off-chain and verified on-chain via the `deletionProof`.      This saves gas and time over deleting identities one at a time.",
            "params": {
              "batchSize": "The number of identities that are to be deleted in the current batch.",
              "deletionProof": "The proof that given the conditions (`preRoot` and `packedDeletionIndices`),        deletion into the tree results in `postRoot`. Elements 0 and 1 are the `x` and `y`        coordinates for `ar` respectively. Elements 2 and 3 are the `x` coordinate for `bs`,         and elements 4 and 5 are the `y` coordinate for `bs`. Elements 6 and 7 are the `x`         and `y` coordinates for `krs`.",
              "packedDeletionIndices": "The indices of the identities that were deleted from the tree.",
              "postRoot": "The root obtained after deleting all of `identityCommitments` into the tree        described by `preRoot`. Must be an element of the field `Kr`.",
              "preRoot": "The value for the root of the tree before the `identityCommitments` have been       inserted. Must be an element of the field `Kr`."
            }
          },
          "getDeleteIdentitiesVerifierLookupTableAddress()": {
            "details": "The deletion verifier supports batch deletions of size 10, 100 and 1000 members per batch.",
            "returns": {
              "_0": "addr The address of the contract being used as the verifier lookup table."
            }
          },
          "getIdentityUpdateVerifierLookupTableAddress()": {
            "details": "The update verifier is also used for member removals.",
            "returns": {
              "_0": "addr The address of the contract being used as the verifier lookup table."
            }
          },
          "getRegisterIdentitiesVerifierLookupTableAddress()": {
            "returns": {
              "_0": "addr The address of the contract being used as the verifier lookup table."
            }
          },
          "getRootHistoryExpiry()": {
            "returns": {
              "_0": "expiryTime The amount of time it takes for a root to expire."
            }
          },
          "getSemaphoreVerifierAddress()": {
            "returns": {
              "_0": "addr The address of the contract being used as the verifier."
            }
          },
          "getTreeDepth()": {
            "returns": {
              "_0": "initializedTreeDepth Tree depth."
            }
          },
          "identityOperator()": {
            "returns": {
              "_0": "_ The address authorized to perform identity operations."
            }
          },
          "initialize(uint8,uint256,address,address,address)": {
            "custom:reverts": "string If called more than once at the same initialisation number.UnsupportedTreeDepth If passed tree depth is not among defined values.",
            "details": "Must be called exactly once.This is marked `reinitializer()` to allow for updated initialisation steps when working      with upgrades based upon this contract. Be aware that there are only 256 (zero-indexed)      initialisations allowed, so decide carefully when to use them. Many cases can safely be      replaced by use of setters.This function is explicitly not virtual as it does not make sense to override even when      upgrading. Create a separate initializer function instead.",
            "params": {
              "_batchInsertionVerifiers": "The verifier lookup table for batch insertions.",
              "_batchUpdateVerifiers": "The verifier lookup table for batch updates.",
              "_semaphoreVerifier": "The verifier to use for semaphore protocol proofs.",
              "_treeDepth": "The depth of the MerkeTree",
              "initialRoot": "The initial value for the `latestRoot` in the contract. When deploying        this should be set to the root of the empty tree."
            }
          },
          "initializeV2(address)": {
            "details": "Must be called exactly onceThis is marked `reinitializer()` to allow for updated initialisation steps when working      with upgrades based upon this contract. Be aware that there are only 256 (zero-indexed)      initialisations allowed, so decide carefully when to use them. Many cases can safely be      replaced by use of setters.This function is explicitly not virtual as it does not make sense to override even when      upgrading. Create a separate initializer function instead."
          },
          "latestRoot()": {
            "returns": {
              "_0": "root The value of the latest tree root."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "pendingOwner()": {
            "details": "Returns the address of the pending owner."
          },
          "proxiableUUID()": {
            "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
          },
          "queryRoot(uint256)": {
            "details": "Should be used sparingly as the query can be quite expensive.",
            "params": {
              "root": "The root for which you are querying information."
            },
            "returns": {
              "_0": "rootInfo The information about `root`, or `NO_SUCH_ROOT` if `root` does not exist.         Note that if the queried root is the current, the timestamp will be invalid as the         root has not been superseded."
            }
          },
          "registerIdentities(uint256[8],uint256,uint32,uint256[],uint256)": {
            "custom:reverts": "Unauthorized If the message sender is not authorised to add identities.NotLatestRoot If the provided `preRoot` is not the latest root.ProofValidationFailure If `insertionProof` cannot be verified using the                 provided inputs.VerifierLookupTable.NoSuchVerifier If the batch sizes doesn't match a known                 verifier.VerifierLookupTable.BatchTooLarge If the batch size exceeds the maximum                 batch size.",
            "params": {
              "identityCommitments": "The identities that were inserted into the tree starting at        `startIndex` and `preRoot` to give `postRoot`. All of the commitments must be        elements of the field `Kr`.",
              "postRoot": "The root obtained after inserting all of `identityCommitments` into the tree        described by `preRoot`. Must be an element of the field `Kr`. (alread in reduced form)",
              "startIndex": "The position in the tree at which the insertions were made."
            }
          },
          "renounceOwnership()": {
            "details": "This function is intentionally not `virtual` as we do not want it to be possible to      renounce ownership for any WorldID implementation.This function is marked as `onlyOwner` to maintain the access restriction from the base      contract."
          },
          "requireValidRoot(uint256)": {
            "custom:reverts": "ExpiredRoot If the provided `root` has expired.NonExistentRoot If the provided `root` does not exist in the history.",
            "details": "A root is valid if it is either the latest root, or not the latest root but has not      expired.",
            "params": {
              "root": "The root of the merkle tree to check for validity."
            }
          },
          "setDeleteIdentitiesVerifierLookupTable(address)": {
            "details": "Only the owner of the contract can call this function.",
            "params": {
              "newTable": "The new verifier lookup table to be used for verifying identity        deletions."
            }
          },
          "setIdentityOperator(address)": {
            "params": {
              "newIdentityOperator": "The address of the new identity operator."
            },
            "returns": {
              "_0": "_ The address of the old identity operator."
            }
          },
          "setIdentityUpdateVerifierLookupTable(address)": {
            "details": "Only the owner of the contract can call this function.The update verifier is also used for member removals.",
            "params": {
              "newTable": "The new lookup table instance to be used for verifying identity updates."
            }
          },
          "setRegisterIdentitiesVerifierLookupTable(address)": {
            "details": "Only the owner of the contract can call this function.",
            "params": {
              "newTable": "The new verifier lookup table to be used for verifying identity        registrations."
            }
          },
          "setRootHistoryExpiry(uint256)": {
            "details": "Only the owner of the contract can call this function.",
            "params": {
              "newExpiryTime": "The new time to use to expire roots."
            }
          },
          "setSemaphoreVerifier(address)": {
            "details": "Only the owner of the contract can call this function.",
            "params": {
              "newVerifier": "The new verifier instance to be used for verifying semaphore proofs."
            }
          },
          "transferOwnership(address)": {
            "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
          },
          "updateIdentities(uint256[8],uint256,uint32[],uint256[],uint256[],uint256)": {
            "custom:reverts": "Unauthorized If the message sender is not authorised to update identities.NotLatestRoot If the provided `preRoot` is not the latest root.MismatchedInputLengths If the provided arrays for `leafIndices`,                 `oldIdentities` and `newIdentities` do not match in length.ProofValidationFailure If `removalProof` cannot be verified using the                 provided inputs.UnreducedElement If any of the `preRoot`, `postRoot` and `identities` is not                 an element of the field `Kr`. It describes the type and value of the                 unreduced element.NoSuchVerifier If the batch sizes doesn't match a known verifier.",
            "params": {
              "leafIndices": "The array of leaf indices at which the update operations take place in        the tree. Elements in this array are extended to 256 bits when encoding.",
              "newIdentities": "The array of new values for the identities. Length must match that of        `leafIndices`.",
              "oldIdentities": "The array of old values for the identities. Length must match that of        `leafIndices`.",
              "postRoot": "The root obtained after removing all of `removedIdentities` from the tree        described by `preRoot`. Must be an element of the field `Kr`. The arrays `leafIndices`, `oldIdentities` and `newIdentities` are arranged such that the triple at an element `i` in those arrays corresponds to one update operation."
            }
          },
          "upgradeTo(address)": {
            "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
          },
          "upgradeToAndCall(address,bytes)": {
            "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
          },
          "verifyProof(uint256,uint256,uint256,uint256,uint256[8])": {
            "custom:reverts": "string If the zero-knowledge proof cannot be verified for the public inputs.",
            "details": "Note that a double-signaling check is not included here, and should be carried by the      caller.",
            "params": {
              "externalNullifierHash": "A keccak256 hash of the external nullifier",
              "nullifierHash": "The nullifier hash",
              "proof": "The zero-knowledge proof",
              "root": "The of the Merkle tree",
              "signalHash": "A keccak256 hash of the Semaphore signal"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "NO_SUCH_ROOT()": {
            "notice": "A constant representing a root that doesn't exist."
          },
          "calculateIdentityDeletionInputHash(bytes,uint256,uint256,uint32)": {
            "notice": "Calculates the input hash for the identity deletion verifier."
          },
          "calculateIdentityRegistrationInputHash(uint32,uint256,uint256,uint256[])": {
            "notice": "Calculates the input hash for the identity registration verifier."
          },
          "calculateIdentityUpdateInputHash(uint256,uint256,uint32[],uint256[],uint256[])": {
            "notice": "Calculates the input hash for the identity update verifier."
          },
          "deleteIdentities(uint256[8],uint32,bytes,uint256,uint256)": {
            "notice": "Deletes identities from the WorldID system."
          },
          "getDeleteIdentitiesVerifierLookupTableAddress()": {
            "notice": "Gets the address for the lookup table of merkle tree verifiers used for batch identity         deletions."
          },
          "getIdentityUpdateVerifierLookupTableAddress()": {
            "notice": "Gets the address for the lookup table of merkle tree verifiers used for identity         updates."
          },
          "getRegisterIdentitiesVerifierLookupTableAddress()": {
            "notice": "Gets the address for the lookup table of merkle tree verifiers used for identity         registrations."
          },
          "getRootHistoryExpiry()": {
            "notice": "Gets the current amount of time used to expire roots in the history."
          },
          "getSemaphoreVerifierAddress()": {
            "notice": "Gets the address of the verifier used for verification of semaphore proofs."
          },
          "getTreeDepth()": {
            "notice": "Gets the Semaphore tree depth the contract was initialized with."
          },
          "identityOperator()": {
            "notice": "Gets the address that is authorised to perform identity operations on this identity         manager instance."
          },
          "initialize(uint8,uint256,address,address,address)": {
            "notice": "Initializes the contract."
          },
          "initializeV2(address)": {
            "notice": "Initializes the V2 implementation contract."
          },
          "latestRoot()": {
            "notice": "Allows a caller to query the latest root."
          },
          "queryRoot(uint256)": {
            "notice": "Allows a caller to query the root history for information about a given root."
          },
          "renounceOwnership()": {
            "notice": "Ensures that ownership of WorldID implementations cannot be renounced."
          },
          "requireValidRoot(uint256)": {
            "notice": "Reverts if the provided root value is not valid."
          },
          "setDeleteIdentitiesVerifierLookupTable(address)": {
            "notice": "Sets the address for the lookup table of merkle tree verifiers used for identity         deletions."
          },
          "setIdentityOperator(address)": {
            "notice": "Sets the address that is authorised to perform identity operations on this identity         manager instance."
          },
          "setIdentityUpdateVerifierLookupTable(address)": {
            "notice": "Sets the address for the lookup table of merkle tree verifiers to be used for         verification of identity updates."
          },
          "setRegisterIdentitiesVerifierLookupTable(address)": {
            "notice": "Sets the address for the lookup table of merkle tree verifiers used for identity         registrations."
          },
          "setRootHistoryExpiry(uint256)": {
            "notice": "Sets the time to wait before expiring a root from the root history."
          },
          "setSemaphoreVerifier(address)": {
            "notice": "Sets the address for the semaphore verifier to be used for verification of         semaphore proofs."
          },
          "verifyProof(uint256,uint256,uint256,uint256,uint256[8])": {
            "notice": "A verifier for the semaphore protocol."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@zk-kit/=lib/zk-kit/packages/",
        "contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "ds-test/=lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "semaphore/=lib/semaphore/packages/contracts/contracts/",
        "solmate/=lib/solmate/src/",
        "zk-kit/=lib/zk-kit/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/WorldIDIdentityManagerImplV2.sol": "WorldIDIdentityManagerImplV2"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts-upgradeable/contracts/access/Ownable2StepUpgradeable.sol": {
        "keccak256": "0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9",
        "urls": [
          "bzz-raw://79ecc0838b0649460c0a538a4adb55b2b530e726c5526afc5e09c8eea4f3af13",
          "dweb:/ipfs/QmUxugyGDGGeLzDFi8QDH2vQMtCFaheiujWv58SuGVx4bZ"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
        "keccak256": "0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888",
        "urls": [
          "bzz-raw://d7fc8396619de513c96b6e00301b88dd790e83542aab918425633a5f7297a15a",
          "dweb:/ipfs/QmXbP4kiZyp7guuS7xe8KaybnwkRPGrBc2Kbi3vhcTfpxb"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol": {
        "keccak256": "0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f",
        "urls": [
          "bzz-raw://496bd9b3df2455d571018c09f0c6badd29713fdeb907c6aa09d8d28cb603f053",
          "dweb:/ipfs/QmXdJDyYs6WMwMh21dez2BYPxhSUaUYFMDtVNcn2cgFR79"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
        "keccak256": "0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823",
        "urls": [
          "bzz-raw://29dda00da6d269685b555e710e4abf1c3eb6d00c15b888a7880a2f8dd3c4fdc2",
          "dweb:/ipfs/QmSqcjtdECygtT1Gy7uEo42x8542srpgGEeKKHfcnQqXgn"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol": {
        "keccak256": "0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908",
        "urls": [
          "bzz-raw://4dbfe1a3b3b3fb64294ce41fd2ad362e7b7012208117864f42c1a67620a6d5c1",
          "dweb:/ipfs/QmVMU5tWt7zBQMmf5cpMX8UMHV86T3kFeTxBTBjFqVWfoJ"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271",
        "urls": [
          "bzz-raw://8a313cf42389440e2706837c91370323b85971c06afd6d056d21e2bc86459618",
          "dweb:/ipfs/QmT8XUrUvQ9aZaPKrqgRU2JVGWnaxBcUYJA7Q7K5KcLBSZ"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
        "keccak256": "0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778",
        "urls": [
          "bzz-raw://40e60cbf0e2efede4d9c169e66336a64615af7b719a896ef1f37ae8cd4614ec1",
          "dweb:/ipfs/QmYNiwY22ifhfa8yK6mLCEKfj39caYUHLqe2VBtzDnvdsV"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183",
        "urls": [
          "bzz-raw://72460c66cd1c3b1c11b863e0d8df0a1c56f37743019e468dc312c754f43e3b06",
          "dweb:/ipfs/QmPExYKiNb9PUsgktQBupPaM33kzDHxaYoVeJdLhv8s879"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
        "keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
        "urls": [
          "bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
          "dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol": {
        "keccak256": "0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a",
        "urls": [
          "bzz-raw://aedb48081190fa828d243529ce25c708202c7d4ccfe99f0e4ecd6bc0cfcd03f3",
          "dweb:/ipfs/QmWyiDQHPZA56iqsAwTmiJoxvNeRQLUVr4gTfzpdpXivpo"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0x923b9774b81c1abfb992262ae7763b6e6de77b077a7180d53c6ebb7b1c8bd648",
        "urls": [
          "bzz-raw://53445dc0431f9b45c06f567c6091da961d4087bec0010cca5bd62100fa624a38",
          "dweb:/ipfs/QmNvBYpBv183czrAqNXr76E8M3LF93ouAJFeAcHfb59Rcx"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
        "keccak256": "0x7cdab82b437a17902683a413c86d14f512674a0710007bf44c584a2d2d3ca833",
        "urls": [
          "bzz-raw://ffe4db7a9f3cdd5a5d019462c2859f4f98f7aae08704afdcb3ef0d08d966bbeb",
          "dweb:/ipfs/QmTCHSuoi22dAu55qv4TcENyTmv5mTpAoxmYWD8cRnEp3M"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "lib/semaphore/packages/contracts/contracts/base/Pairing.sol": {
        "keccak256": "0x44390032d1247a0e3931eb39f1220f170db653c6b3b4321b2e2b0034f5e07334",
        "urls": [
          "bzz-raw://725cc4bdf047d17bf9d47c9a0205d90897c0da334de8e556c1a3049b1beb9aed",
          "dweb:/ipfs/QmSo7SXpqyrqHFhYi7F8SGjcVxCdVr6FNdgiw7Qfre1NGt"
        ],
        "license": "MIT"
      },
      "lib/semaphore/packages/contracts/contracts/interfaces/ISemaphoreVerifier.sol": {
        "keccak256": "0x5b5b1118ed7936014d3e410419d6048cc9c0ae69fd700442593f2c2cc782e1af",
        "urls": [
          "bzz-raw://601cf2c7e3c98735ff38eaff225af090ec847d63ec599ecc2340323145430668",
          "dweb:/ipfs/QmUoZYgge8GmQokXrYiRXn24s4HgBZetiNWQssiSoTFrdi"
        ],
        "license": "MIT"
      },
      "src/WorldIDIdentityManagerImplV1.sol": {
        "keccak256": "0xa1065360c830348be5e6f45dfb766d9f415d0321170a804da0b2f56338c14b36",
        "urls": [
          "bzz-raw://cd10fbb5eaf1f57cfe026baf79ee8cb7ca9d7db50599b77062d2634a147e9645",
          "dweb:/ipfs/QmdtRnh5nPkRFynH2mNsYvaAur8QPwsuCg6A1AAQnKB291"
        ],
        "license": "MIT"
      },
      "src/WorldIDIdentityManagerImplV2.sol": {
        "keccak256": "0xa88ed74cd795d2a9a7cbb99f88fa1393c25d7807525c6f081b57d163180f887b",
        "urls": [
          "bzz-raw://5e045ea6313140813d515f5ceb43624cba08cfd14657445a731ba76a1e8252f1",
          "dweb:/ipfs/Qmb4kfWzbV3gVjrhfVo2PphCijTXxdBUvz9N1mV3Mivcd5"
        ],
        "license": null
      },
      "src/abstract/WorldIDImpl.sol": {
        "keccak256": "0xccfff2c5d7af4e505ed13b7d46011d5544317343ea92e7beb874e4d69358e6d0",
        "urls": [
          "bzz-raw://428860598ca38e42e29892a0b4759c4d3010378f54c3b3e4392f965ff091076e",
          "dweb:/ipfs/QmYPjcDRTr1UEeSbS7ssdGjbDHzAqjRNKBsYJqKJWeL8bZ"
        ],
        "license": "MIT"
      },
      "src/data/VerifierLookupTable.sol": {
        "keccak256": "0xfd213b79aaec8d205c50ab3ed5c4ebed06ae602ed526a820340adc1c76745fbc",
        "urls": [
          "bzz-raw://6af992a56a7cee8124af7f16d74dc8a2a7ae5f8b3059b92d46862e44c3804b83",
          "dweb:/ipfs/QmV9bQtJ9PjnwsiiZMUGJANB3znSxJ6ACTqWv9WkQeoeB3"
        ],
        "license": "MIT"
      },
      "src/interfaces/IBaseWorldID.sol": {
        "keccak256": "0xcec58605726864d72e35d62c85e002acc98d3f8fa19d01b49fff461c2767c144",
        "urls": [
          "bzz-raw://57714fcbceb0497f3fe8906778a837082939489fbb0bd930d015ad6e971913d5",
          "dweb:/ipfs/QmQVVmLr9CEkR727ByMF96a8MbwAeB4AQQWvxneg2Avkq8"
        ],
        "license": "MIT"
      },
      "src/interfaces/IBridge.sol": {
        "keccak256": "0x0931c789450d21479da5d4de8c6435fca965660f6e1bd746fff958f4c20cf2ac",
        "urls": [
          "bzz-raw://0c564b4d4a15e8075555077a043d773bb20133548376402ff3dbc0eccb57435d",
          "dweb:/ipfs/QmXQRihAFdtfyjTNeHmx9nmNHiS1wy2658Y5aXCXo2tKSQ"
        ],
        "license": "MIT"
      },
      "src/interfaces/ITreeVerifier.sol": {
        "keccak256": "0xb572aeae7331d96981d46b0dd4408db9ad507a06a2dbf0624386114b2244c8ad",
        "urls": [
          "bzz-raw://6159630f78e9e0b3a326d064772713f8c1e73172718c2a6d5af1fb36b35c5991",
          "dweb:/ipfs/QmPN5VyQvonPfPdTvrmP5wqsFT3QNW3RwC8DHYdEtwXZT4"
        ],
        "license": "MIT"
      },
      "src/interfaces/IWorldID.sol": {
        "keccak256": "0x577908eff2d29d96354a06ab2602ffe6b97aa9d491330efcc2fcd0a88a8acbb1",
        "urls": [
          "bzz-raw://fa0a36a598a851b88cff364b4211dc32081f51940aa8076d9c9b7de8ab126b2f",
          "dweb:/ipfs/QmSne8aRiE8C8RuwEUSk4doETKAGaavrEYyUkwiJc5H8qc"
        ],
        "license": "MIT"
      },
      "src/utils/CheckInitialized.sol": {
        "keccak256": "0xfab096b633efd580548007e97920f6088e6d8a5287db84b9aa3d595c02fefcf4",
        "urls": [
          "bzz-raw://dee612c9dbad59d535e7a72b79191187fd91c06af9cb5b6f68d60274d0ee2c04",
          "dweb:/ipfs/QmVJbSQ8DAN6igasbgHjZTM4NRZ3EjrhK8wFcvUG1wPYtZ"
        ],
        "license": "MIT"
      },
      "src/utils/SemaphoreTreeDepthValidator.sol": {
        "keccak256": "0x50140161de381aa963457cfd2ee8831a435bd79040f38794e6ef07365c49c872",
        "urls": [
          "bzz-raw://bcc5b8a3a6f5146aa3fdee550c3e80d828b55df63223485da3d5655a591ad661",
          "dweb:/ipfs/QmWfUzbeFoSaPV1E8QxagUnpt5zfmPXgiropUg1GcV6oZs"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/WorldIDIdentityManagerImplV2.sol",
    "id": 34136,
    "exportedSymbols": {
      "IBridge": [
        34450
      ],
      "ISemaphoreVerifier": [
        32716
      ],
      "ITreeVerifier": [
        34478
      ],
      "IWorldID": [
        34502
      ],
      "SemaphoreTreeDepthValidator": [
        47908
      ],
      "VerifierLookupTable": [
        34425
      ],
      "WorldIDIdentityManagerImplV1": [
        33896
      ],
      "WorldIDIdentityManagerImplV2": [
        34135
      ],
      "WorldIDImpl": [
        34190
      ]
    },
    "nodeType": "SourceUnit",
    "src": "0:12051:43",
    "nodes": [
      {
        "id": 33898,
        "nodeType": "PragmaDirective",
        "src": "0:24:43",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".21"
        ]
      },
      {
        "id": 33899,
        "nodeType": "ImportDirective",
        "src": "26:44:43",
        "nodes": [],
        "absolutePath": "src/WorldIDIdentityManagerImplV1.sol",
        "file": "./WorldIDIdentityManagerImplV1.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 34136,
        "sourceUnit": 33897,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 34135,
        "nodeType": "ContractDefinition",
        "src": "443:11607:43",
        "nodes": [
          {
            "id": 33906,
            "nodeType": "VariableDeclaration",
            "src": "3108:51:43",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 33903,
              "nodeType": "StructuredDocumentation",
              "src": "3029:74:43",
              "text": "@notice The table of verifiers for verifying batch identity deletions."
            },
            "mutability": "mutable",
            "name": "batchDeletionVerifiers",
            "nameLocation": "3137:22:43",
            "scope": 34135,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
              "typeString": "contract VerifierLookupTable"
            },
            "typeName": {
              "id": 33905,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 33904,
                "name": "VerifierLookupTable",
                "nameLocations": [
                  "3108:19:43"
                ],
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 34425,
                "src": "3108:19:43"
              },
              "referencedDeclaration": 34425,
              "src": "3108:19:43",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                "typeString": "contract VerifierLookupTable"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 33921,
            "nodeType": "FunctionDefinition",
            "src": "3800:152:43",
            "nodes": [],
            "body": {
              "id": 33920,
              "nodeType": "Block",
              "src": "3889:63:43",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 33918,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 33916,
                      "name": "batchDeletionVerifiers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33906,
                      "src": "3899:22:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                        "typeString": "contract VerifierLookupTable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 33917,
                      "name": "_batchUpdateVerifiers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33910,
                      "src": "3924:21:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                        "typeString": "contract VerifierLookupTable"
                      }
                    },
                    "src": "3899:46:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                      "typeString": "contract VerifierLookupTable"
                    }
                  },
                  "id": 33919,
                  "nodeType": "ExpressionStatement",
                  "src": "3899:46:43"
                }
              ]
            },
            "documentation": {
              "id": 33907,
              "nodeType": "StructuredDocumentation",
              "src": "3166:629:43",
              "text": "@notice Initializes the V2 implementation contract.\n @dev Must be called exactly once\n @dev This is marked `reinitializer()` to allow for updated initialisation steps when working\n      with upgrades based upon this contract. Be aware that there are only 256 (zero-indexed)\n      initialisations allowed, so decide carefully when to use them. Many cases can safely be\n      replaced by use of setters.\n @dev This function is explicitly not virtual as it does not make sense to override even when\n      upgrading. Create a separate initializer function instead."
            },
            "functionSelector": "29b6eca9",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "32",
                    "id": 33913,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3886:1:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  }
                ],
                "id": 33914,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 33912,
                  "name": "reinitializer",
                  "nameLocations": [
                    "3872:13:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29736,
                  "src": "3872:13:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "3872:16:43"
              }
            ],
            "name": "initializeV2",
            "nameLocation": "3809:12:43",
            "parameters": {
              "id": 33911,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 33910,
                  "mutability": "mutable",
                  "name": "_batchUpdateVerifiers",
                  "nameLocation": "3842:21:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 33921,
                  "src": "3822:41:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                    "typeString": "contract VerifierLookupTable"
                  },
                  "typeName": {
                    "id": 33909,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 33908,
                      "name": "VerifierLookupTable",
                      "nameLocations": [
                        "3822:19:43"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 34425,
                      "src": "3822:19:43"
                    },
                    "referencedDeclaration": 34425,
                    "src": "3822:19:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                      "typeString": "contract VerifierLookupTable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3821:43:43"
            },
            "returnParameters": {
              "id": 33915,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3889:0:43"
            },
            "scope": 34135,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 34062,
            "nodeType": "FunctionDefinition",
            "src": "6380:2438:43",
            "nodes": [],
            "body": {
              "id": 34061,
              "nodeType": "Block",
              "src": "6640:2178:43",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 33945,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 33943,
                      "name": "preRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33932,
                      "src": "6654:7:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "id": 33944,
                      "name": "_latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32764,
                      "src": "6665:11:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "6654:22:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 33952,
                  "nodeType": "IfStatement",
                  "src": "6650:95:43",
                  "trueBody": {
                    "id": 33951,
                    "nodeType": "Block",
                    "src": "6678:67:43",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [
                            {
                              "id": 33947,
                              "name": "preRoot",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33932,
                              "src": "6713:7:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 33948,
                              "name": "_latestRoot",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 32764,
                              "src": "6722:11:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 33946,
                            "name": "NotLatestRoot",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32868,
                            "src": "6699:13:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256) pure"
                            }
                          },
                          "id": 33949,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6699:35:43",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 33950,
                        "nodeType": "RevertStatement",
                        "src": "6692:42:43"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    33954
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33954,
                      "mutability": "mutable",
                      "name": "inputHash",
                      "nameLocation": "6844:9:43",
                      "nodeType": "VariableDeclaration",
                      "scope": 34061,
                      "src": "6836:17:43",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 33953,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "6836:7:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33961,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 33956,
                        "name": "packedDeletionIndices",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33930,
                        "src": "6903:21:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      {
                        "id": 33957,
                        "name": "preRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33932,
                        "src": "6926:7:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 33958,
                        "name": "postRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33934,
                        "src": "6935:8:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 33959,
                        "name": "batchSize",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33928,
                        "src": "6945:9:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "id": 33955,
                      "name": "calculateIdentityDeletionInputHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34134,
                      "src": "6868:34:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_bytes_calldata_ptr_$_t_uint256_$_t_uint256_$_t_uint32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes calldata,uint256,uint256,uint32) view returns (bytes32)"
                      }
                    },
                    "id": 33960,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6868:87:43",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6836:119:43"
                },
                {
                  "assignments": [
                    33963
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33963,
                      "mutability": "mutable",
                      "name": "reducedElement",
                      "nameLocation": "7234:14:43",
                      "nodeType": "VariableDeclaration",
                      "scope": 34061,
                      "src": "7226:22:43",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 33962,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7226:7:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33970,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 33969,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 33966,
                          "name": "inputHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33954,
                          "src": "7259:9:43",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 33965,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "7251:7:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        },
                        "typeName": {
                          "id": 33964,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7251:7:43",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 33967,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "7251:18:43",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "%",
                    "rightExpression": {
                      "id": 33968,
                      "name": "SNARK_SCALAR_FIELD",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32776,
                      "src": "7272:18:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "7251:39:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7226:64:43"
                },
                {
                  "assignments": [
                    33973
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 33973,
                      "mutability": "mutable",
                      "name": "deletionVerifier",
                      "nameLocation": "7388:16:43",
                      "nodeType": "VariableDeclaration",
                      "scope": 34061,
                      "src": "7374:30:43",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ITreeVerifier_$34478",
                        "typeString": "contract ITreeVerifier"
                      },
                      "typeName": {
                        "id": 33972,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 33971,
                          "name": "ITreeVerifier",
                          "nameLocations": [
                            "7374:13:43"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 34478,
                          "src": "7374:13:43"
                        },
                        "referencedDeclaration": 34478,
                        "src": "7374:13:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ITreeVerifier_$34478",
                          "typeString": "contract ITreeVerifier"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 33978,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 33976,
                        "name": "batchSize",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33928,
                        "src": "7445:9:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint32",
                          "typeString": "uint32"
                        }
                      ],
                      "expression": {
                        "id": 33974,
                        "name": "batchDeletionVerifiers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33906,
                        "src": "7407:22:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                          "typeString": "contract VerifierLookupTable"
                        }
                      },
                      "id": 33975,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7430:14:43",
                      "memberName": "getVerifierFor",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 34297,
                      "src": "7407:37:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_uint256_$returns$_t_contract$_ITreeVerifier_$34478_$",
                        "typeString": "function (uint256) view external returns (contract ITreeVerifier)"
                      }
                    },
                    "id": 33977,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7407:48:43",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ITreeVerifier_$34478",
                      "typeString": "contract ITreeVerifier"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "7374:81:43"
                },
                {
                  "clauses": [
                    {
                      "block": {
                        "id": 34044,
                        "nodeType": "Block",
                        "src": "7813:634:43",
                        "statements": [
                          {
                            "condition": {
                              "id": 34017,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "!",
                              "prefix": true,
                              "src": "7901:15:43",
                              "subExpression": {
                                "id": 34016,
                                "name": "verifierResult",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34014,
                                "src": "7902:14:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 34022,
                            "nodeType": "IfStatement",
                            "src": "7897:85:43",
                            "trueBody": {
                              "id": 34021,
                              "nodeType": "Block",
                              "src": "7918:64:43",
                              "statements": [
                                {
                                  "errorCall": {
                                    "arguments": [],
                                    "expression": {
                                      "argumentTypes": [],
                                      "id": 34018,
                                      "name": "ProofValidationFailure",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 32861,
                                      "src": "7943:22:43",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                        "typeString": "function () pure"
                                      }
                                    },
                                    "id": 34019,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "7943:24:43",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 34020,
                                  "nodeType": "RevertStatement",
                                  "src": "7936:31:43"
                                }
                              ]
                            }
                          },
                          {
                            "expression": {
                              "id": 34025,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 34023,
                                "name": "_latestRoot",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 32764,
                                "src": "8150:11:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "id": 34024,
                                "name": "postRoot",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 33934,
                                "src": "8164:8:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "8150:22:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 34026,
                            "nodeType": "ExpressionStatement",
                            "src": "8150:22:43"
                          },
                          {
                            "expression": {
                              "id": 34035,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "baseExpression": {
                                  "id": 34027,
                                  "name": "rootHistory",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 32769,
                                  "src": "8318:11:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint128_$",
                                    "typeString": "mapping(uint256 => uint128)"
                                  }
                                },
                                "id": 34029,
                                "indexExpression": {
                                  "id": 34028,
                                  "name": "preRoot",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 33932,
                                  "src": "8330:7:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "8318:20:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint128",
                                  "typeString": "uint128"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 34032,
                                      "name": "block",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": -4,
                                      "src": "8349:5:43",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_block",
                                        "typeString": "block"
                                      }
                                    },
                                    "id": 34033,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "8355:9:43",
                                    "memberName": "timestamp",
                                    "nodeType": "MemberAccess",
                                    "src": "8349:15:43",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 34031,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "8341:7:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint128_$",
                                    "typeString": "type(uint128)"
                                  },
                                  "typeName": {
                                    "id": 34030,
                                    "name": "uint128",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "8341:7:43",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 34034,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "8341:24:43",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint128",
                                  "typeString": "uint128"
                                }
                              },
                              "src": "8318:47:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            },
                            "id": 34036,
                            "nodeType": "ExpressionStatement",
                            "src": "8318:47:43"
                          },
                          {
                            "eventCall": {
                              "arguments": [
                                {
                                  "id": 34038,
                                  "name": "preRoot",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 33932,
                                  "src": "8397:7:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "expression": {
                                    "id": 34039,
                                    "name": "TreeChange",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 32819,
                                    "src": "8406:10:43",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_TreeChange_$32819_$",
                                      "typeString": "type(enum WorldIDIdentityManagerImplV1.TreeChange)"
                                    }
                                  },
                                  "id": 34040,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberLocation": "8417:8:43",
                                  "memberName": "Deletion",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 32817,
                                  "src": "8406:19:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_TreeChange_$32819",
                                    "typeString": "enum WorldIDIdentityManagerImplV1.TreeChange"
                                  }
                                },
                                {
                                  "id": 34041,
                                  "name": "postRoot",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 33934,
                                  "src": "8427:8:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_enum$_TreeChange_$32819",
                                    "typeString": "enum WorldIDIdentityManagerImplV1.TreeChange"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 34037,
                                "name": "TreeChanged",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 32895,
                                "src": "8385:11:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_enum$_TreeChange_$32819_$_t_uint256_$returns$__$",
                                  "typeString": "function (uint256,enum WorldIDIdentityManagerImplV1.TreeChange,uint256)"
                                }
                              },
                              "id": 34042,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8385:51:43",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 34043,
                            "nodeType": "EmitStatement",
                            "src": "8380:56:43"
                          }
                        ]
                      },
                      "errorName": "",
                      "id": 34045,
                      "nodeType": "TryCatchClause",
                      "parameters": {
                        "id": 34015,
                        "nodeType": "ParameterList",
                        "parameters": [
                          {
                            "constant": false,
                            "id": 34014,
                            "mutability": "mutable",
                            "name": "verifierResult",
                            "nameLocation": "7797:14:43",
                            "nodeType": "VariableDeclaration",
                            "scope": 34045,
                            "src": "7792:19:43",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 34013,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "7792:4:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "src": "7791:21:43"
                      },
                      "src": "7783:664:43"
                    },
                    {
                      "block": {
                        "id": 34053,
                        "nodeType": "Block",
                        "src": "8485:100:43",
                        "statements": [
                          {
                            "documentation": "This is not the revert we're looking for.",
                            "expression": {
                              "arguments": [
                                {
                                  "id": 34050,
                                  "name": "errString",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 34047,
                                  "src": "8564:9:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "id": 34049,
                                "name": "revert",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -19,
                                  -19
                                ],
                                "referencedDeclaration": -19,
                                "src": "8557:6:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (string memory) pure"
                                }
                              },
                              "id": 34051,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8557:17:43",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 34052,
                            "nodeType": "ExpressionStatement",
                            "src": "8557:17:43"
                          }
                        ]
                      },
                      "errorName": "Error",
                      "id": 34054,
                      "nodeType": "TryCatchClause",
                      "parameters": {
                        "id": 34048,
                        "nodeType": "ParameterList",
                        "parameters": [
                          {
                            "constant": false,
                            "id": 34047,
                            "mutability": "mutable",
                            "name": "errString",
                            "nameLocation": "8474:9:43",
                            "nodeType": "VariableDeclaration",
                            "scope": 34054,
                            "src": "8460:23:43",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string"
                            },
                            "typeName": {
                              "id": 34046,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "8460:6:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage_ptr",
                                "typeString": "string"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "src": "8459:25:43"
                      },
                      "src": "8448:137:43"
                    },
                    {
                      "block": {
                        "id": 34058,
                        "nodeType": "Block",
                        "src": "8592:220:43",
                        "statements": [
                          {
                            "errorCall": {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 34055,
                                "name": "ProofValidationFailure",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 32861,
                                "src": "8777:22:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 34056,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8777:24:43",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 34057,
                            "nodeType": "RevertStatement",
                            "src": "8770:31:43"
                          }
                        ]
                      },
                      "errorName": "",
                      "id": 34059,
                      "nodeType": "TryCatchClause",
                      "src": "8586:226:43"
                    }
                  ],
                  "externalCall": {
                    "arguments": [
                      {
                        "components": [
                          {
                            "baseExpression": {
                              "id": 33981,
                              "name": "deletionProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33926,
                              "src": "7567:13:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                                "typeString": "uint256[8] calldata"
                              }
                            },
                            "id": 33983,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 33982,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7581:1:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7567:16:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "baseExpression": {
                              "id": 33984,
                              "name": "deletionProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33926,
                              "src": "7585:13:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                                "typeString": "uint256[8] calldata"
                              }
                            },
                            "id": 33986,
                            "indexExpression": {
                              "hexValue": "31",
                              "id": 33985,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7599:1:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7585:16:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 33987,
                        "isConstant": false,
                        "isInlineArray": true,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "7566:36:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "components": [
                              {
                                "baseExpression": {
                                  "id": 33988,
                                  "name": "deletionProof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 33926,
                                  "src": "7618:13:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                                    "typeString": "uint256[8] calldata"
                                  }
                                },
                                "id": 33990,
                                "indexExpression": {
                                  "hexValue": "32",
                                  "id": 33989,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7632:1:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_2_by_1",
                                    "typeString": "int_const 2"
                                  },
                                  "value": "2"
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7618:16:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 33991,
                                  "name": "deletionProof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 33926,
                                  "src": "7636:13:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                                    "typeString": "uint256[8] calldata"
                                  }
                                },
                                "id": 33993,
                                "indexExpression": {
                                  "hexValue": "33",
                                  "id": 33992,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7650:1:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_3_by_1",
                                    "typeString": "int_const 3"
                                  },
                                  "value": "3"
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7636:16:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 33994,
                            "isConstant": false,
                            "isInlineArray": true,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "7617:36:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          },
                          {
                            "components": [
                              {
                                "baseExpression": {
                                  "id": 33995,
                                  "name": "deletionProof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 33926,
                                  "src": "7656:13:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                                    "typeString": "uint256[8] calldata"
                                  }
                                },
                                "id": 33997,
                                "indexExpression": {
                                  "hexValue": "34",
                                  "id": 33996,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7670:1:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_4_by_1",
                                    "typeString": "int_const 4"
                                  },
                                  "value": "4"
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7656:16:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "baseExpression": {
                                  "id": 33998,
                                  "name": "deletionProof",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 33926,
                                  "src": "7674:13:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                                    "typeString": "uint256[8] calldata"
                                  }
                                },
                                "id": 34000,
                                "indexExpression": {
                                  "hexValue": "35",
                                  "id": 33999,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7688:1:43",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_5_by_1",
                                    "typeString": "int_const 5"
                                  },
                                  "value": "5"
                                },
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7674:16:43",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 34001,
                            "isConstant": false,
                            "isInlineArray": true,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "7655:36:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                              "typeString": "uint256[2] memory"
                            }
                          }
                        ],
                        "id": 34002,
                        "isConstant": false,
                        "isInlineArray": true,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "7616:76:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_array$_t_uint256_$2_memory_ptr_$2_memory_ptr",
                          "typeString": "uint256[2] memory[2] memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "baseExpression": {
                              "id": 34003,
                              "name": "deletionProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33926,
                              "src": "7707:13:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                                "typeString": "uint256[8] calldata"
                              }
                            },
                            "id": 34005,
                            "indexExpression": {
                              "hexValue": "36",
                              "id": 34004,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7721:1:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_6_by_1",
                                "typeString": "int_const 6"
                              },
                              "value": "6"
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7707:16:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "baseExpression": {
                              "id": 34006,
                              "name": "deletionProof",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33926,
                              "src": "7725:13:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                                "typeString": "uint256[8] calldata"
                              }
                            },
                            "id": 34008,
                            "indexExpression": {
                              "hexValue": "37",
                              "id": 34007,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7739:1:43",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_7_by_1",
                                "typeString": "int_const 7"
                              },
                              "value": "7"
                            },
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7725:16:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 34009,
                        "isConstant": false,
                        "isInlineArray": true,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "7706:36:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 34010,
                            "name": "reducedElement",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 33963,
                            "src": "7757:14:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 34011,
                        "isConstant": false,
                        "isInlineArray": true,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "7756:16:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$1_memory_ptr",
                          "typeString": "uint256[1] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_array$_t_uint256_$2_memory_ptr_$2_memory_ptr",
                          "typeString": "uint256[2] memory[2] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$2_memory_ptr",
                          "typeString": "uint256[2] memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint256_$1_memory_ptr",
                          "typeString": "uint256[1] memory"
                        }
                      ],
                      "expression": {
                        "id": 33979,
                        "name": "deletionVerifier",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33973,
                        "src": "7524:16:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ITreeVerifier_$34478",
                          "typeString": "contract ITreeVerifier"
                        }
                      },
                      "id": 33980,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "7541:11:43",
                      "memberName": "verifyProof",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 34477,
                      "src": "7524:28:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_array$_t_uint256_$2_memory_ptr_$2_memory_ptr_$_t_array$_t_uint256_$2_memory_ptr_$_t_array$_t_uint256_$1_memory_ptr_$returns$_t_bool_$",
                        "typeString": "function (uint256[2] memory,uint256[2] memory[2] memory,uint256[2] memory,uint256[1] memory) external returns (bool)"
                      }
                    },
                    "id": 34012,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7524:258:43",
                    "tryCall": true,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 34060,
                  "nodeType": "TryStatement",
                  "src": "7520:1292:43"
                }
              ]
            },
            "documentation": {
              "id": 33922,
              "nodeType": "StructuredDocumentation",
              "src": "4175:2200:43",
              "text": "@notice Deletes identities from the WorldID system.\n @dev Can only be called by the owner.\n @dev Deletion is performed off-chain and verified on-chain via the `deletionProof`.\n      This saves gas and time over deleting identities one at a time.\n @param deletionProof The proof that given the conditions (`preRoot` and `packedDeletionIndices`),\n        deletion into the tree results in `postRoot`. Elements 0 and 1 are the `x` and `y`\n        coordinates for `ar` respectively. Elements 2 and 3 are the `x` coordinate for `bs`,\n         and elements 4 and 5 are the `y` coordinate for `bs`. Elements 6 and 7 are the `x`\n         and `y` coordinates for `krs`.\n @param batchSize The number of identities that are to be deleted in the current batch.\n @param packedDeletionIndices The indices of the identities that were deleted from the tree.\n @param preRoot The value for the root of the tree before the `identityCommitments` have been\n       inserted. Must be an element of the field `Kr`.\n @param postRoot The root obtained after deleting all of `identityCommitments` into the tree\n        described by `preRoot`. Must be an element of the field `Kr`.\n @custom:reverts Unauthorized If the message sender is not authorised to add identities.\n @custom:reverts InvalidCommitment If one or more of the provided commitments is invalid.\n @custom:reverts NotLatestRoot If the provided `preRoot` is not the latest root.\n @custom:reverts ProofValidationFailure If `deletionProof` cannot be verified using the\n                 provided inputs.\n @custom:reverts UnreducedElement If any of the `preRoot`, `postRoot` and\n                 `identityCommitments` is not an element of the field `Kr`. It describes the\n                 type and value of the unreduced element.\n @custom:reverts VerifierLookupTable.NoSuchVerifier If the batch sizes doesn't match a known\n                 verifier.\n @custom:reverts VerifierLookupTable.BatchTooLarge If the batch size exceeds the maximum\n                 batch size."
            },
            "functionSelector": "23cfdba5",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 33937,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 33936,
                  "name": "onlyProxy",
                  "nameLocations": [
                    "6593:9:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29855,
                  "src": "6593:9:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "6593:9:43"
              },
              {
                "id": 33939,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 33938,
                  "name": "onlyInitialized",
                  "nameLocations": [
                    "6603:15:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47873,
                  "src": "6603:15:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "6603:15:43"
              },
              {
                "id": 33941,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 33940,
                  "name": "onlyIdentityOperator",
                  "nameLocations": [
                    "6619:20:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 33895,
                  "src": "6619:20:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "6619:20:43"
              }
            ],
            "name": "deleteIdentities",
            "nameLocation": "6389:16:43",
            "parameters": {
              "id": 33935,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 33926,
                  "mutability": "mutable",
                  "name": "deletionProof",
                  "nameLocation": "6435:13:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34062,
                  "src": "6415:33:43",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$8_calldata_ptr",
                    "typeString": "uint256[8]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 33923,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "6415:7:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 33925,
                    "length": {
                      "hexValue": "38",
                      "id": 33924,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6423:1:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_8_by_1",
                        "typeString": "int_const 8"
                      },
                      "value": "8"
                    },
                    "nodeType": "ArrayTypeName",
                    "src": "6415:10:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$8_storage_ptr",
                      "typeString": "uint256[8]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33928,
                  "mutability": "mutable",
                  "name": "batchSize",
                  "nameLocation": "6465:9:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34062,
                  "src": "6458:16:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 33927,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6458:6:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33930,
                  "mutability": "mutable",
                  "name": "packedDeletionIndices",
                  "nameLocation": "6499:21:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34062,
                  "src": "6484:36:43",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 33929,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "6484:5:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33932,
                  "mutability": "mutable",
                  "name": "preRoot",
                  "nameLocation": "6538:7:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34062,
                  "src": "6530:15:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 33931,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6530:7:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 33934,
                  "mutability": "mutable",
                  "name": "postRoot",
                  "nameLocation": "6563:8:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34062,
                  "src": "6555:16:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 33933,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "6555:7:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6405:172:43"
            },
            "returnParameters": {
              "id": 33942,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6640:0:43"
            },
            "scope": 34135,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 34078,
            "nodeType": "FunctionDefinition",
            "src": "9156:228:43",
            "nodes": [],
            "body": {
              "id": 34077,
              "nodeType": "Block",
              "src": "9329:55:43",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 34074,
                        "name": "batchDeletionVerifiers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33906,
                        "src": "9354:22:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                          "typeString": "contract VerifierLookupTable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                          "typeString": "contract VerifierLookupTable"
                        }
                      ],
                      "id": 34073,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "9346:7:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 34072,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9346:7:43",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 34075,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9346:31:43",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 34071,
                  "id": 34076,
                  "nodeType": "Return",
                  "src": "9339:38:43"
                }
              ]
            },
            "documentation": {
              "id": 34063,
              "nodeType": "StructuredDocumentation",
              "src": "8824:327:43",
              "text": "@notice Gets the address for the lookup table of merkle tree verifiers used for batch identity\n         deletions.\n @dev The deletion verifier supports batch deletions of size 10, 100 and 1000 members per batch.\n @return addr The address of the contract being used as the verifier lookup table."
            },
            "functionSelector": "3e8919b6",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 34066,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34065,
                  "name": "onlyProxy",
                  "nameLocations": [
                    "9265:9:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29855,
                  "src": "9265:9:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "9265:9:43"
              },
              {
                "id": 34068,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34067,
                  "name": "onlyInitialized",
                  "nameLocations": [
                    "9283:15:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47873,
                  "src": "9283:15:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "9283:15:43"
              }
            ],
            "name": "getDeleteIdentitiesVerifierLookupTableAddress",
            "nameLocation": "9165:45:43",
            "parameters": {
              "id": 34064,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9210:2:43"
            },
            "returnParameters": {
              "id": 34071,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34070,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 34078,
                  "src": "9316:7:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 34069,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9316:7:43",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9315:9:43"
            },
            "scope": 34135,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 34114,
            "nodeType": "FunctionDefinition",
            "src": "9704:418:43",
            "nodes": [],
            "body": {
              "id": 34113,
              "nodeType": "Block",
              "src": "9877:245:43",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    34093
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 34093,
                      "mutability": "mutable",
                      "name": "oldTable",
                      "nameLocation": "9907:8:43",
                      "nodeType": "VariableDeclaration",
                      "scope": 34113,
                      "src": "9887:28:43",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                        "typeString": "contract VerifierLookupTable"
                      },
                      "typeName": {
                        "id": 34092,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 34091,
                          "name": "VerifierLookupTable",
                          "nameLocations": [
                            "9887:19:43"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 34425,
                          "src": "9887:19:43"
                        },
                        "referencedDeclaration": 34425,
                        "src": "9887:19:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                          "typeString": "contract VerifierLookupTable"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 34095,
                  "initialValue": {
                    "id": 34094,
                    "name": "batchDeletionVerifiers",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 33906,
                    "src": "9918:22:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                      "typeString": "contract VerifierLookupTable"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "9887:53:43"
                },
                {
                  "expression": {
                    "id": 34098,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 34096,
                      "name": "batchDeletionVerifiers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33906,
                      "src": "9950:22:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                        "typeString": "contract VerifierLookupTable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 34097,
                      "name": "newTable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34082,
                      "src": "9975:8:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                        "typeString": "contract VerifierLookupTable"
                      }
                    },
                    "src": "9950:33:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                      "typeString": "contract VerifierLookupTable"
                    }
                  },
                  "id": 34099,
                  "nodeType": "ExpressionStatement",
                  "src": "9950:33:43"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 34101,
                          "name": "Dependency",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 32826,
                          "src": "10029:10:43",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_Dependency_$32826_$",
                            "typeString": "type(enum WorldIDIdentityManagerImplV1.Dependency)"
                          }
                        },
                        "id": 34102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "10040:27:43",
                        "memberName": "DeletionVerifierLookupTable",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 32823,
                        "src": "10029:38:43",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Dependency_$32826",
                          "typeString": "enum WorldIDIdentityManagerImplV1.Dependency"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 34105,
                            "name": "oldTable",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 34093,
                            "src": "10077:8:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                              "typeString": "contract VerifierLookupTable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                              "typeString": "contract VerifierLookupTable"
                            }
                          ],
                          "id": 34104,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "10069:7:43",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 34103,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "10069:7:43",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 34106,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10069:17:43",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 34109,
                            "name": "newTable",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 34082,
                            "src": "10096:8:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                              "typeString": "contract VerifierLookupTable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                              "typeString": "contract VerifierLookupTable"
                            }
                          ],
                          "id": 34108,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "10088:7:43",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 34107,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "10088:7:43",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 34110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10088:17:43",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_Dependency_$32826",
                          "typeString": "enum WorldIDIdentityManagerImplV1.Dependency"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 34100,
                      "name": "DependencyUpdated",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32905,
                      "src": "9998:17:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_enum$_Dependency_$32826_$_t_address_$_t_address_$returns$__$",
                        "typeString": "function (enum WorldIDIdentityManagerImplV1.Dependency,address,address)"
                      }
                    },
                    "id": 34111,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9998:117:43",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34112,
                  "nodeType": "EmitStatement",
                  "src": "9993:122:43"
                }
              ]
            },
            "documentation": {
              "id": 34079,
              "nodeType": "StructuredDocumentation",
              "src": "9390:309:43",
              "text": "@notice Sets the address for the lookup table of merkle tree verifiers used for identity\n         deletions.\n @dev Only the owner of the contract can call this function.\n @param newTable The new verifier lookup table to be used for verifying identity\n        deletions."
            },
            "functionSelector": "aa4a729e",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 34085,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34084,
                  "name": "onlyProxy",
                  "nameLocations": [
                    "9821:9:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29855,
                  "src": "9821:9:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "9821:9:43"
              },
              {
                "id": 34087,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34086,
                  "name": "onlyInitialized",
                  "nameLocations": [
                    "9839:15:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47873,
                  "src": "9839:15:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "9839:15:43"
              },
              {
                "id": 34089,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34088,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "9863:9:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29157,
                  "src": "9863:9:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "9863:9:43"
              }
            ],
            "name": "setDeleteIdentitiesVerifierLookupTable",
            "nameLocation": "9713:38:43",
            "parameters": {
              "id": 34083,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34082,
                  "mutability": "mutable",
                  "name": "newTable",
                  "nameLocation": "9772:8:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34114,
                  "src": "9752:28:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                    "typeString": "contract VerifierLookupTable"
                  },
                  "typeName": {
                    "id": 34081,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 34080,
                      "name": "VerifierLookupTable",
                      "nameLocations": [
                        "9752:19:43"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 34425,
                      "src": "9752:19:43"
                    },
                    "referencedDeclaration": 34425,
                    "src": "9752:19:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_VerifierLookupTable_$34425",
                      "typeString": "contract VerifierLookupTable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9751:30:43"
            },
            "returnParameters": {
              "id": 34090,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9877:0:43"
            },
            "scope": 34135,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 34134,
            "nodeType": "FunctionDefinition",
            "src": "11363:685:43",
            "nodes": [],
            "body": {
              "id": 34133,
              "nodeType": "Block",
              "src": "11605:443:43",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nativeSrc": "11624:418:43",
                    "nodeType": "YulBlock",
                    "src": "11624:418:43",
                    "statements": [
                      {
                        "nativeSrc": "11638:30:43",
                        "nodeType": "YulVariableDeclaration",
                        "src": "11638:30:43",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "11663:4:43",
                              "nodeType": "YulLiteral",
                              "src": "11663:4:43",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nativeSrc": "11657:5:43",
                            "nodeType": "YulIdentifier",
                            "src": "11657:5:43"
                          },
                          "nativeSrc": "11657:11:43",
                          "nodeType": "YulFunctionCall",
                          "src": "11657:11:43"
                        },
                        "variables": [
                          {
                            "name": "startOffset",
                            "nativeSrc": "11642:11:43",
                            "nodeType": "YulTypedName",
                            "src": "11642:11:43",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "nativeSrc": "11681:40:43",
                        "nodeType": "YulVariableDeclaration",
                        "src": "11681:40:43",
                        "value": {
                          "arguments": [
                            {
                              "name": "batchSize",
                              "nativeSrc": "11708:9:43",
                              "nodeType": "YulIdentifier",
                              "src": "11708:9:43"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "11719:1:43",
                              "nodeType": "YulLiteral",
                              "src": "11719:1:43",
                              "type": "",
                              "value": "4"
                            }
                          ],
                          "functionName": {
                            "name": "mul",
                            "nativeSrc": "11704:3:43",
                            "nodeType": "YulIdentifier",
                            "src": "11704:3:43"
                          },
                          "nativeSrc": "11704:17:43",
                          "nodeType": "YulFunctionCall",
                          "src": "11704:17:43"
                        },
                        "variables": [
                          {
                            "name": "indicesByteSize",
                            "nativeSrc": "11685:15:43",
                            "nodeType": "YulTypedName",
                            "src": "11685:15:43",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "startOffset",
                              "nativeSrc": "11747:11:43",
                              "nodeType": "YulIdentifier",
                              "src": "11747:11:43"
                            },
                            {
                              "name": "packedDeletionIndices.offset",
                              "nativeSrc": "11760:28:43",
                              "nodeType": "YulIdentifier",
                              "src": "11760:28:43"
                            },
                            {
                              "name": "indicesByteSize",
                              "nativeSrc": "11790:15:43",
                              "nodeType": "YulIdentifier",
                              "src": "11790:15:43"
                            }
                          ],
                          "functionName": {
                            "name": "calldatacopy",
                            "nativeSrc": "11734:12:43",
                            "nodeType": "YulIdentifier",
                            "src": "11734:12:43"
                          },
                          "nativeSrc": "11734:72:43",
                          "nodeType": "YulFunctionCall",
                          "src": "11734:72:43"
                        },
                        "nativeSrc": "11734:72:43",
                        "nodeType": "YulExpressionStatement",
                        "src": "11734:72:43"
                      },
                      {
                        "nativeSrc": "11819:52:43",
                        "nodeType": "YulVariableDeclaration",
                        "src": "11819:52:43",
                        "value": {
                          "arguments": [
                            {
                              "name": "startOffset",
                              "nativeSrc": "11842:11:43",
                              "nodeType": "YulIdentifier",
                              "src": "11842:11:43"
                            },
                            {
                              "name": "indicesByteSize",
                              "nativeSrc": "11855:15:43",
                              "nodeType": "YulIdentifier",
                              "src": "11855:15:43"
                            }
                          ],
                          "functionName": {
                            "name": "add",
                            "nativeSrc": "11838:3:43",
                            "nodeType": "YulIdentifier",
                            "src": "11838:3:43"
                          },
                          "nativeSrc": "11838:33:43",
                          "nodeType": "YulFunctionCall",
                          "src": "11838:33:43"
                        },
                        "variables": [
                          {
                            "name": "rootsOffset",
                            "nativeSrc": "11823:11:43",
                            "nodeType": "YulTypedName",
                            "src": "11823:11:43",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "rootsOffset",
                              "nativeSrc": "11891:11:43",
                              "nodeType": "YulIdentifier",
                              "src": "11891:11:43"
                            },
                            {
                              "name": "preRoot",
                              "nativeSrc": "11904:7:43",
                              "nodeType": "YulIdentifier",
                              "src": "11904:7:43"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "11884:6:43",
                            "nodeType": "YulIdentifier",
                            "src": "11884:6:43"
                          },
                          "nativeSrc": "11884:28:43",
                          "nodeType": "YulFunctionCall",
                          "src": "11884:28:43"
                        },
                        "nativeSrc": "11884:28:43",
                        "nodeType": "YulExpressionStatement",
                        "src": "11884:28:43"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "rootsOffset",
                                  "nativeSrc": "11936:11:43",
                                  "nodeType": "YulIdentifier",
                                  "src": "11936:11:43"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "11949:2:43",
                                  "nodeType": "YulLiteral",
                                  "src": "11949:2:43",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "11932:3:43",
                                "nodeType": "YulIdentifier",
                                "src": "11932:3:43"
                              },
                              "nativeSrc": "11932:20:43",
                              "nodeType": "YulFunctionCall",
                              "src": "11932:20:43"
                            },
                            {
                              "name": "postRoot",
                              "nativeSrc": "11954:8:43",
                              "nodeType": "YulIdentifier",
                              "src": "11954:8:43"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "11925:6:43",
                            "nodeType": "YulIdentifier",
                            "src": "11925:6:43"
                          },
                          "nativeSrc": "11925:38:43",
                          "nodeType": "YulFunctionCall",
                          "src": "11925:38:43"
                        },
                        "nativeSrc": "11925:38:43",
                        "nodeType": "YulExpressionStatement",
                        "src": "11925:38:43"
                      },
                      {
                        "nativeSrc": "11976:56:43",
                        "nodeType": "YulAssignment",
                        "src": "11976:56:43",
                        "value": {
                          "arguments": [
                            {
                              "name": "startOffset",
                              "nativeSrc": "11994:11:43",
                              "nodeType": "YulIdentifier",
                              "src": "11994:11:43"
                            },
                            {
                              "arguments": [
                                {
                                  "kind": "number",
                                  "nativeSrc": "12011:2:43",
                                  "nodeType": "YulLiteral",
                                  "src": "12011:2:43",
                                  "type": "",
                                  "value": "64"
                                },
                                {
                                  "name": "indicesByteSize",
                                  "nativeSrc": "12015:15:43",
                                  "nodeType": "YulIdentifier",
                                  "src": "12015:15:43"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "12007:3:43",
                                "nodeType": "YulIdentifier",
                                "src": "12007:3:43"
                              },
                              "nativeSrc": "12007:24:43",
                              "nodeType": "YulFunctionCall",
                              "src": "12007:24:43"
                            }
                          ],
                          "functionName": {
                            "name": "keccak256",
                            "nativeSrc": "11984:9:43",
                            "nodeType": "YulIdentifier",
                            "src": "11984:9:43"
                          },
                          "nativeSrc": "11984:48:43",
                          "nodeType": "YulFunctionCall",
                          "src": "11984:48:43"
                        },
                        "variableNames": [
                          {
                            "name": "hash",
                            "nativeSrc": "11976:4:43",
                            "nodeType": "YulIdentifier",
                            "src": "11976:4:43"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "paris",
                  "externalReferences": [
                    {
                      "declaration": 34123,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "11708:9:43",
                      "valueSize": 1
                    },
                    {
                      "declaration": 34130,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "11976:4:43",
                      "valueSize": 1
                    },
                    {
                      "declaration": 34117,
                      "isOffset": true,
                      "isSlot": false,
                      "src": "11760:28:43",
                      "suffix": "offset",
                      "valueSize": 1
                    },
                    {
                      "declaration": 34121,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "11954:8:43",
                      "valueSize": 1
                    },
                    {
                      "declaration": 34119,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "11904:7:43",
                      "valueSize": 1
                    }
                  ],
                  "id": 34132,
                  "nodeType": "InlineAssembly",
                  "src": "11615:427:43"
                }
              ]
            },
            "documentation": {
              "id": 34115,
              "nodeType": "StructuredDocumentation",
              "src": "10381:977:43",
              "text": "@notice Calculates the input hash for the identity deletion verifier.\n @dev Implements the computation described below.\n @param packedDeletionIndices The indices of the identities that were deleted from the tree.\n @param preRoot The root value of the tree before these insertions were made.\n @param postRoot The root value of the tree after these insertions were made.\n @param batchSize The number of identities that were deleted in this batch\n @return hash The input hash calculated as described below.\n @dev the deletion indices are packed into bytes calldata where each deletion index is 32 bits\n     wide. The indices are encoded using abi.encodePacked for testing.\n We keccak hash all input to save verification gas. Inputs for the hash are arranged as follows:\n packedDeletionIndices || PreRoot || PostRoot\n   32 bits * batchSize ||   256   ||    256"
            },
            "functionSelector": "31e4e992",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 34126,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34125,
                  "name": "onlyProxy",
                  "nameLocations": [
                    "11556:9:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29855,
                  "src": "11556:9:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "11556:9:43"
              },
              {
                "id": 34128,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 34127,
                  "name": "onlyInitialized",
                  "nameLocations": [
                    "11566:15:43"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 47873,
                  "src": "11566:15:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "11566:15:43"
              }
            ],
            "name": "calculateIdentityDeletionInputHash",
            "nameLocation": "11372:34:43",
            "parameters": {
              "id": 34124,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34117,
                  "mutability": "mutable",
                  "name": "packedDeletionIndices",
                  "nameLocation": "11431:21:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34134,
                  "src": "11416:36:43",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 34116,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "11416:5:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34119,
                  "mutability": "mutable",
                  "name": "preRoot",
                  "nameLocation": "11470:7:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34134,
                  "src": "11462:15:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 34118,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11462:7:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34121,
                  "mutability": "mutable",
                  "name": "postRoot",
                  "nameLocation": "11495:8:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34134,
                  "src": "11487:16:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 34120,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "11487:7:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 34123,
                  "mutability": "mutable",
                  "name": "batchSize",
                  "nameLocation": "11520:9:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34134,
                  "src": "11513:16:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 34122,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "11513:6:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11406:129:43"
            },
            "returnParameters": {
              "id": 34131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 34130,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "11599:4:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 34134,
                  "src": "11591:12:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 34129,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "11591:7:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "11590:14:43"
            },
            "scope": 34135,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 33901,
              "name": "WorldIDIdentityManagerImplV1",
              "nameLocations": [
                "484:28:43"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 33896,
              "src": "484:28:43"
            },
            "id": 33902,
            "nodeType": "InheritanceSpecifier",
            "src": "484:28:43"
          }
        ],
        "canonicalName": "WorldIDIdentityManagerImplV2",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 33900,
          "nodeType": "StructuredDocumentation",
          "src": "72:371:43",
          "text": "@title WorldID Identity Manager Implementation Version 2\n @author Worldcoin\n @notice An implementation of a batch-based identity manager for the WorldID protocol.\n @dev The manager is based on the principle of verifying externally-created Zero Knowledge Proofs\n      to perform the insertions.\n @dev This is the implementation delegated to by a proxy."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          34135,
          33896,
          34502,
          34435,
          34190,
          47879,
          29937,
          29622,
          29253,
          29111,
          29243,
          30263,
          29801
        ],
        "name": "WorldIDIdentityManagerImplV2",
        "nameLocation": "452:28:43",
        "scope": 34136,
        "usedErrors": [
          32848,
          32853,
          32858,
          32861,
          32868,
          32871,
          32874,
          32877,
          32882,
          32885,
          34166,
          34431,
          34434,
          47850
        ],
        "usedEvents": [
          29037,
          29128,
          29287,
          29431,
          29496,
          29647,
          32895,
          32905,
          32910,
          32917,
          32924,
          32931
        ]
      }
    ]
  },
  "id": 43
}